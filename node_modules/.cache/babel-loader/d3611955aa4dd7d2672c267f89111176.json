{"ast":null,"code":"import { ADDRESS_ZERO, wethAddresses } from \"@airswap/constants\";\nimport { BigNumber } from \"bignumber.js\";\nimport { Contract } from \"ethers\";\nimport uniswapFactoryAbi from \"../../uniswap/abis/factory.json\";\nimport uniswapPairAbi from \"../../uniswap/abis/pair.json\";\nimport uniswapDeploys from \"../../uniswap/deployments\";\nexport const gasUsedPerSwap = 185555;\n\nconst getFastGasPrice = async () => {\n  const url = \"https://ethgasstation.info/api/ethgasAPI.json\";\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    return new BigNumber(data.fast).dividedBy(10 ** 10);\n  } catch (e) {\n    console.error(\"Error getting gas price from ethgas.watch API: \", e.message);\n    return null;\n  }\n};\n\nconst getPriceOfTokenInWethFromUniswap = async (tokenInfo, provider, chainId) => {\n  const tokenAddress = tokenInfo.address;\n  const wethAddress = wethAddresses[String(chainId)];\n  if (tokenAddress === wethAddress || tokenAddress === ADDRESS_ZERO) return new BigNumber(1); // Get factory so we can find the token <> weth pair pool.\n\n  const FactoryContract = new Contract(uniswapDeploys.factory, uniswapFactoryAbi, provider);\n  const pairAddress = await FactoryContract.getPair(tokenAddress, wethAddress);\n  const pairContract = new Contract(pairAddress, uniswapPairAbi, provider); // Need to know which token (0 or 1) is WETH, plus how much of each token is\n  // in the pool.\n\n  const promises = [pairContract.token0(), pairContract.getReserves()];\n  const result = await Promise.all(promises);\n  const typedResult = result;\n  const [token0Address, [reserve0, reserve1]] = typedResult;\n  let wethUnits, tokenUnits;\n\n  if (token0Address.toLowerCase() === wethAddress) {\n    wethUnits = new BigNumber(reserve0.toString()).dividedBy(10 ** 18);\n    tokenUnits = new BigNumber(reserve1.toString()).dividedBy(10 ** tokenInfo.decimals);\n  } else {\n    tokenUnits = new BigNumber(reserve0.toString()).dividedBy(10 ** tokenInfo.decimals);\n    wethUnits = new BigNumber(reserve1.toString()).dividedBy(10 ** 18);\n  } // UniSwap has approximately equal value of each token in the pool.\n\n\n  return wethUnits.dividedBy(tokenUnits);\n};\n\nexport { getFastGasPrice, getPriceOfTokenInWethFromUniswap };","map":{"version":3,"sources":["/Users/marcusmattus/ethdex/src/features/gasCost/gasCostApi.ts"],"names":["ADDRESS_ZERO","wethAddresses","BigNumber","Contract","uniswapFactoryAbi","uniswapPairAbi","uniswapDeploys","gasUsedPerSwap","getFastGasPrice","url","response","fetch","data","json","fast","dividedBy","e","console","error","message","getPriceOfTokenInWethFromUniswap","tokenInfo","provider","chainId","tokenAddress","address","wethAddress","String","FactoryContract","factory","pairAddress","getPair","pairContract","promises","token0","getReserves","result","Promise","all","typedResult","token0Address","reserve0","reserve1","wethUnits","tokenUnits","toLowerCase","toString","decimals"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,oBAA5C;AAGA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAASC,QAAT,QAAkE,QAAlE;AAEA,OAAOC,iBAAP,MAA8B,iCAA9B;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AAEA,OAAO,MAAMC,cAAc,GAAG,MAAvB;;AAMP,MAAMC,eAAgD,GAAG,YAAY;AACnE,QAAMC,GAAG,GAAG,+CAAZ;;AACA,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,CAA5B;AACA,UAAMG,IAA4B,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA3C;AACA,WAAO,IAAIX,SAAJ,CAAcU,IAAI,CAACE,IAAnB,EAAyBC,SAAzB,CAAmC,MAAM,EAAzC,CAAP;AACD,GAJD,CAIE,OAAOC,CAAP,EAAe;AACfC,IAAAA,OAAO,CAACC,KAAR,CAAc,iDAAd,EAAiEF,CAAC,CAACG,OAAnE;AACA,WAAO,IAAP;AACD;AACF,CAVD;;AAYA,MAAMC,gCAIiB,GAAG,OAAOC,SAAP,EAAkBC,QAAlB,EAA4BC,OAA5B,KAAwC;AAChE,QAAMC,YAAY,GAAGH,SAAS,CAACI,OAA/B;AACA,QAAMC,WAAW,GAAGzB,aAAa,CAAC0B,MAAM,CAACJ,OAAD,CAAP,CAAjC;AACA,MAAIC,YAAY,KAAKE,WAAjB,IAAgCF,YAAY,KAAKxB,YAArD,EACE,OAAO,IAAIE,SAAJ,CAAc,CAAd,CAAP,CAJ8D,CAMhE;;AACA,QAAM0B,eAAe,GAAG,IAAIzB,QAAJ,CACtBG,cAAc,CAACuB,OADO,EAEtBzB,iBAFsB,EAGtBkB,QAHsB,CAAxB;AAKA,QAAMQ,WAAW,GAAG,MAAMF,eAAe,CAACG,OAAhB,CAAwBP,YAAxB,EAAsCE,WAAtC,CAA1B;AACA,QAAMM,YAAY,GAAG,IAAI7B,QAAJ,CAAa2B,WAAb,EAA0BzB,cAA1B,EAA0CiB,QAA1C,CAArB,CAbgE,CAehE;AACA;;AACA,QAAMW,QAAQ,GAAG,CAACD,YAAY,CAACE,MAAb,EAAD,EAAwBF,YAAY,CAACG,WAAb,EAAxB,CAAjB;AACA,QAAMC,MAAM,GAAG,MAAMC,OAAO,CAACC,GAAR,CAAYL,QAAZ,CAArB;AACA,QAAMM,WAAW,GAAGH,MAApB;AACA,QAAM,CAACI,aAAD,EAAgB,CAACC,QAAD,EAAWC,QAAX,CAAhB,IAAwCH,WAA9C;AAEA,MAAII,SAAJ,EAA0BC,UAA1B;;AAEA,MAAIJ,aAAa,CAACK,WAAd,OAAgCnB,WAApC,EAAiD;AAC/CiB,IAAAA,SAAS,GAAG,IAAIzC,SAAJ,CAAcuC,QAAQ,CAACK,QAAT,EAAd,EAAmC/B,SAAnC,CAA6C,MAAM,EAAnD,CAAZ;AACA6B,IAAAA,UAAU,GAAG,IAAI1C,SAAJ,CAAcwC,QAAQ,CAACI,QAAT,EAAd,EAAmC/B,SAAnC,CACX,MAAMM,SAAS,CAAC0B,QADL,CAAb;AAGD,GALD,MAKO;AACLH,IAAAA,UAAU,GAAG,IAAI1C,SAAJ,CAAcuC,QAAQ,CAACK,QAAT,EAAd,EAAmC/B,SAAnC,CACX,MAAMM,SAAS,CAAC0B,QADL,CAAb;AAGAJ,IAAAA,SAAS,GAAG,IAAIzC,SAAJ,CAAcwC,QAAQ,CAACI,QAAT,EAAd,EAAmC/B,SAAnC,CAA6C,MAAM,EAAnD,CAAZ;AACD,GAlC+D,CAoChE;;;AACA,SAAO4B,SAAS,CAAC5B,SAAV,CAAoB6B,UAApB,CAAP;AACD,CA1CD;;AA4CA,SAASpC,eAAT,EAA0BY,gCAA1B","sourcesContent":["import { ADDRESS_ZERO, wethAddresses } from \"@airswap/constants\";\nimport { TokenInfo } from \"@airswap/types\";\n\nimport { BigNumber } from \"bignumber.js\";\nimport { Contract, providers, BigNumber as EthersBigNumber } from \"ethers\";\n\nimport uniswapFactoryAbi from \"../../uniswap/abis/factory.json\";\nimport uniswapPairAbi from \"../../uniswap/abis/pair.json\";\nimport uniswapDeploys from \"../../uniswap/deployments\";\n\nexport const gasUsedPerSwap = 185555;\n\ntype EthGasWatchApiResponse = {\n  fast: number;\n};\n\nconst getFastGasPrice: () => Promise<BigNumber | null> = async () => {\n  const url = \"https://ethgasstation.info/api/ethgasAPI.json\";\n  try {\n    const response = await fetch(url);\n    const data: EthGasWatchApiResponse = await response.json();\n    return new BigNumber(data.fast).dividedBy(10 ** 10);\n  } catch (e: any) {\n    console.error(\"Error getting gas price from ethgas.watch API: \", e.message);\n    return null;\n  }\n};\n\nconst getPriceOfTokenInWethFromUniswap: (\n  tokenInfo: TokenInfo,\n  provider: providers.Provider,\n  chainId: number\n) => Promise<BigNumber> = async (tokenInfo, provider, chainId) => {\n  const tokenAddress = tokenInfo.address;\n  const wethAddress = wethAddresses[String(chainId)];\n  if (tokenAddress === wethAddress || tokenAddress === ADDRESS_ZERO)\n    return new BigNumber(1);\n\n  // Get factory so we can find the token <> weth pair pool.\n  const FactoryContract = new Contract(\n    uniswapDeploys.factory,\n    uniswapFactoryAbi,\n    provider\n  );\n  const pairAddress = await FactoryContract.getPair(tokenAddress, wethAddress);\n  const pairContract = new Contract(pairAddress, uniswapPairAbi, provider);\n\n  // Need to know which token (0 or 1) is WETH, plus how much of each token is\n  // in the pool.\n  const promises = [pairContract.token0(), pairContract.getReserves()];\n  const result = await Promise.all(promises);\n  const typedResult = result as [string, [EthersBigNumber, EthersBigNumber]];\n  const [token0Address, [reserve0, reserve1]] = typedResult;\n\n  let wethUnits: BigNumber, tokenUnits: BigNumber;\n\n  if (token0Address.toLowerCase() === wethAddress) {\n    wethUnits = new BigNumber(reserve0.toString()).dividedBy(10 ** 18);\n    tokenUnits = new BigNumber(reserve1.toString()).dividedBy(\n      10 ** tokenInfo.decimals\n    );\n  } else {\n    tokenUnits = new BigNumber(reserve0.toString()).dividedBy(\n      10 ** tokenInfo.decimals\n    );\n    wethUnits = new BigNumber(reserve1.toString()).dividedBy(10 ** 18);\n  }\n\n  // UniSwap has approximately equal value of each token in the pool.\n  return wethUnits.dividedBy(tokenUnits);\n};\n\nexport { getFastGasPrice, getPriceOfTokenInWethFromUniswap };\n"]},"metadata":{},"sourceType":"module"}