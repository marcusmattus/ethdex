{"ast":null,"code":"import { ThemeType as _ThemeType } from \"styled-components\";\n\nvar _jsxFileName = \"/Users/marcusmattus/ethdex/src/components/SettingsPopover/SettingsPopover.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useRef } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\nimport { SUPPORTED_LOCALES, LOCALE_LABEL } from \"../../constants/locales\";\nimport { selectTheme, setTheme } from \"../../features/userSettings/userSettingsSlice\";\nimport useWindowSize from \"../../helpers/useWindowSize\";\nimport useAppRouteParams from \"../../hooks/useAppRouteParams\";\nimport { Container, ThemeContainer, ThemeButton, LocaleContainer, LocaleButton } from \"./SettingsPopover.styles\";\nimport PopoverSection from \"./subcomponents/PopoverSection/PopoverSection\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SettingsPopover = ({\n  open,\n  popoverRef\n}) => {\n  _s();\n\n  const {\n    width,\n    height\n  } = useWindowSize();\n  const scrollContainerRef = useRef(null);\n  const selectedTheme = useAppSelector(selectTheme);\n  const [overflow, setOverflow] = useState(false);\n  const appRouteParams = useAppRouteParams();\n  const dispatch = useAppDispatch();\n  const {\n    t\n  } = useTranslation();\n\n  const handleThemeButtonClick = newTheme => {\n    dispatch(setTheme(newTheme));\n  };\n\n  useEffect(() => {\n    if (popoverRef.current && scrollContainerRef.current) {\n      const {\n        offsetTop,\n        scrollHeight\n      } = scrollContainerRef.current;\n      setOverflow(scrollHeight + offsetTop > popoverRef.current.offsetHeight);\n    }\n  }, [popoverRef, scrollContainerRef, width, height]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    ref: popoverRef,\n    open: open,\n    children: [/*#__PURE__*/_jsxDEV(PopoverSection, {\n      title: t(\"common.theme\"),\n      children: /*#__PURE__*/_jsxDEV(ThemeContainer, {\n        children: [/*#__PURE__*/_jsxDEV(ThemeButton, {\n          $isActive: selectedTheme === \"system\",\n          onClick: () => handleThemeButtonClick(\"system\"),\n          children: t(\"common.system\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ThemeButton, {\n          $isActive: selectedTheme === \"light\",\n          onClick: () => handleThemeButtonClick(\"light\"),\n          children: t(\"common.light\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ThemeButton, {\n          $isActive: selectedTheme === \"dark\",\n          onClick: () => handleThemeButtonClick(\"dark\"),\n          children: t(\"common.dark\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PopoverSection, {\n      title: t(\"common.language\"),\n      children: /*#__PURE__*/_jsxDEV(LocaleContainer, {\n        ref: scrollContainerRef,\n        $overflow: overflow,\n        children: SUPPORTED_LOCALES.map(locale => {\n          return /*#__PURE__*/_jsxDEV(LocaleButton, {\n            $isActive: appRouteParams.lang === locale,\n            to: `/${locale}${appRouteParams.urlWithoutLang}`,\n            children: LOCALE_LABEL[locale]\n          }, locale, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SettingsPopover, \"GPWojCr6WGvynZ5e88tWUpzO6SA=\", false, function () {\n  return [useWindowSize, useAppSelector, useAppRouteParams, useAppDispatch, useTranslation];\n});\n\n_c = SettingsPopover;\nexport default SettingsPopover;\n\nvar _c;\n\n$RefreshReg$(_c, \"SettingsPopover\");","map":{"version":3,"sources":["/Users/marcusmattus/ethdex/src/components/SettingsPopover/SettingsPopover.tsx"],"names":["useState","useEffect","useRef","useTranslation","useAppDispatch","useAppSelector","SUPPORTED_LOCALES","LOCALE_LABEL","selectTheme","setTheme","useWindowSize","useAppRouteParams","Container","ThemeContainer","ThemeButton","LocaleContainer","LocaleButton","PopoverSection","SettingsPopover","open","popoverRef","width","height","scrollContainerRef","selectedTheme","overflow","setOverflow","appRouteParams","dispatch","t","handleThemeButtonClick","newTheme","current","offsetTop","scrollHeight","offsetHeight","map","locale","lang","urlWithoutLang"],"mappings":"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","sourcesContent":["import { useState, useEffect, useRef, RefObject } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { ThemeType } from \"styled-components/macro\";\n\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\nimport { SUPPORTED_LOCALES, LOCALE_LABEL } from \"../../constants/locales\";\nimport {\n  selectTheme,\n  setTheme,\n} from \"../../features/userSettings/userSettingsSlice\";\nimport useWindowSize from \"../../helpers/useWindowSize\";\nimport useAppRouteParams from \"../../hooks/useAppRouteParams\";\nimport {\n  Container,\n  ThemeContainer,\n  ThemeButton,\n  LocaleContainer,\n  LocaleButton,\n} from \"./SettingsPopover.styles\";\nimport PopoverSection from \"./subcomponents/PopoverSection/PopoverSection\";\n\ntype SettingsPopoverPropsType = {\n  open: boolean;\n  popoverRef: RefObject<HTMLDivElement>;\n};\n\nconst SettingsPopover = ({ open, popoverRef }: SettingsPopoverPropsType) => {\n  const { width, height } = useWindowSize();\n  const scrollContainerRef = useRef<HTMLDivElement>(null);\n  const selectedTheme = useAppSelector(selectTheme);\n  const [overflow, setOverflow] = useState<boolean>(false);\n\n  const appRouteParams = useAppRouteParams();\n  const dispatch = useAppDispatch();\n  const { t } = useTranslation();\n\n  const handleThemeButtonClick = (newTheme: ThemeType | \"system\") => {\n    dispatch(setTheme(newTheme));\n  };\n\n  useEffect(() => {\n    if (popoverRef.current && scrollContainerRef.current) {\n      const { offsetTop, scrollHeight } = scrollContainerRef.current;\n      setOverflow(scrollHeight + offsetTop > popoverRef.current.offsetHeight);\n    }\n  }, [popoverRef, scrollContainerRef, width, height]);\n\n  return (\n    <Container ref={popoverRef} open={open}>\n      <PopoverSection title={t(\"common.theme\")}>\n        <ThemeContainer>\n          <ThemeButton\n            $isActive={selectedTheme === \"system\"}\n            onClick={() => handleThemeButtonClick(\"system\")}\n          >\n            {t(\"common.system\")}\n          </ThemeButton>\n          <ThemeButton\n            $isActive={selectedTheme === \"light\"}\n            onClick={() => handleThemeButtonClick(\"light\")}\n          >\n            {t(\"common.light\")}\n          </ThemeButton>\n          <ThemeButton\n            $isActive={selectedTheme === \"dark\"}\n            onClick={() => handleThemeButtonClick(\"dark\")}\n          >\n            {t(\"common.dark\")}\n          </ThemeButton>\n        </ThemeContainer>\n      </PopoverSection>\n      <PopoverSection title={t(\"common.language\")}>\n        <LocaleContainer ref={scrollContainerRef} $overflow={overflow}>\n          {SUPPORTED_LOCALES.map((locale) => {\n            return (\n              <LocaleButton\n                key={locale}\n                $isActive={appRouteParams.lang === locale}\n                to={`/${locale}${appRouteParams.urlWithoutLang}`}\n              >\n                {LOCALE_LABEL[locale]}\n              </LocaleButton>\n            );\n          })}\n        </LocaleContainer>\n      </PopoverSection>\n    </Container>\n  );\n};\n\nexport default SettingsPopover;\n"]},"metadata":{},"sourceType":"module"}