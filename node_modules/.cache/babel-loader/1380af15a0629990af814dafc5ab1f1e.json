{"ast":null,"code":"var _jsxFileName = \"/Users/marcusmattus/ethdex/airswap-web/src/components/TokenList/TokenList.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useMemo, useRef, useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport nativeETH from \"../../constants/nativeETH\";\nimport useWindowSize from \"../../helpers/useWindowSize\";\nimport { OverlayActionButton } from \"../Overlay/Overlay.styles\";\nimport { InfoHeading } from \"../Typography/Typography\";\nimport { Container, SearchInput, TokenContainer, Legend, LegendItem, LegendDivider, StyledScrollContainer, ContentContainer, NoResultsContainer } from \"./TokenList.styles\";\nimport { filterTokens } from \"./filter\";\nimport { sortTokenByExactMatch, sortTokensBySymbolAndBalance } from \"./sort\";\nimport InactiveTokensList from \"./subcomponents/InactiveTokensList/InactiveTokensList\";\nimport TokenButton from \"./subcomponents/TokenButton/TokenButton\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TokenList = ({\n  chainId,\n  onSelectToken,\n  balances,\n  allTokens,\n  activeTokens = [],\n  supportedTokenAddresses,\n  addActiveToken,\n  removeActiveToken\n}) => {\n  _s();\n\n  const {\n    width,\n    height\n  } = useWindowSize();\n  const containerRef = useRef(null);\n  const buttonRef = useRef(null);\n  const scrollContainerRef = useRef(null);\n  const [overflow, setOverflow] = useState(false);\n  const [editMode, setEditMode] = useState(false);\n  const [tokenQuery, setTokenQuery] = useState(\"\");\n  const {\n    t\n  } = useTranslation(); // sort tokens based on symbol\n\n  const sortedTokens = useMemo(() => {\n    return sortTokensBySymbolAndBalance(activeTokens, balances);\n  }, [activeTokens, balances]); // filter token\n\n  const filteredTokens = useMemo(() => {\n    return filterTokens(Object.values(sortedTokens), tokenQuery);\n  }, [sortedTokens, tokenQuery]);\n  const sortedFilteredTokens = useMemo(() => {\n    return sortTokenByExactMatch(filteredTokens, tokenQuery);\n  }, [filteredTokens, tokenQuery]); // sort inactive tokens based on symbol\n\n  const sortedInactiveTokens = useMemo(() => {\n    return sortTokenByExactMatch(allTokens.filter(el => {\n      return !activeTokens.includes(el);\n    }), tokenQuery);\n  }, [allTokens, activeTokens, tokenQuery]); // only take the top 10 tokens\n\n  const inactiveTokens = useMemo(() => {\n    return filterTokens(Object.values(sortedInactiveTokens), tokenQuery).slice(0, 10);\n  }, [sortedInactiveTokens, tokenQuery]);\n  useEffect(() => {\n    if (containerRef.current && scrollContainerRef.current && buttonRef.current) {\n      const {\n        offsetTop,\n        scrollHeight\n      } = scrollContainerRef.current;\n      const {\n        scrollHeight: buttonHeight\n      } = buttonRef.current;\n      setOverflow(scrollHeight + offsetTop + buttonHeight > containerRef.current.offsetHeight);\n    }\n  }, [containerRef, scrollContainerRef, activeTokens, sortedTokens, allTokens, tokenQuery, width, height]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    ref: containerRef,\n    children: /*#__PURE__*/_jsxDEV(ContentContainer, {\n      children: [/*#__PURE__*/_jsxDEV(SearchInput, {\n        hideLabel: true,\n        id: \"tokenQuery\",\n        type: \"text\",\n        label: t(\"orders.searchByNameOrAddress\"),\n        value: tokenQuery,\n        placeholder: t(\"orders.searchByNameOrAddress\"),\n        onChange: e => {\n          setTokenQuery(e.currentTarget.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StyledScrollContainer, {\n        ref: scrollContainerRef,\n        $overflow: overflow,\n        children: [/*#__PURE__*/_jsxDEV(Legend, {\n          children: [/*#__PURE__*/_jsxDEV(LegendItem, {\n            children: t(\"common.token\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(LegendDivider, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(LegendItem, {\n            children: t(\"balances.balance\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this), sortedFilteredTokens && sortedFilteredTokens.length > 0 && /*#__PURE__*/_jsxDEV(TokenContainer, {\n          children: [nativeETH[chainId], ...sortedFilteredTokens].map(token => /*#__PURE__*/_jsxDEV(TokenButton, {\n            showDeleteButton: editMode && token.address !== nativeETH[chainId].address,\n            token: token,\n            balance: formatUnits(balances.values[token.address] || 0, token.decimals),\n            setToken: onSelectToken,\n            removeActiveToken: removeActiveToken\n          }, token.address, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }, this), inactiveTokens.length !== 0 && tokenQuery && sortedFilteredTokens.length < 5 && /*#__PURE__*/_jsxDEV(InactiveTokensList, {\n          inactiveTokens: inactiveTokens,\n          supportedTokenAddresses: supportedTokenAddresses,\n          onTokenClick: tokenAddress => {\n            addActiveToken(tokenAddress);\n            setTokenQuery(\"\");\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 15\n        }, this), sortedFilteredTokens.length === 0 && inactiveTokens.length === 0 && /*#__PURE__*/_jsxDEV(NoResultsContainer, {\n          children: /*#__PURE__*/_jsxDEV(InfoHeading, {\n            children: t(\"common.noResultsFound\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(OverlayActionButton, {\n        intent: \"primary\",\n        ref: buttonRef,\n        onClick: () => setEditMode(!editMode),\n        children: editMode ? t(\"common.done\") : t(\"orders.editCustomTokens\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TokenList, \"m7h6CcTen+K4XBE9c2pOmRgeggE=\", false, function () {\n  return [useWindowSize, useTranslation];\n});\n\n_c = TokenList;\nexport default TokenList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TokenList\");","map":{"version":3,"sources":["/Users/marcusmattus/ethdex/airswap-web/src/components/TokenList/TokenList.tsx"],"names":["useState","useMemo","useRef","useEffect","useTranslation","formatUnits","nativeETH","useWindowSize","OverlayActionButton","InfoHeading","Container","SearchInput","TokenContainer","Legend","LegendItem","LegendDivider","StyledScrollContainer","ContentContainer","NoResultsContainer","filterTokens","sortTokenByExactMatch","sortTokensBySymbolAndBalance","InactiveTokensList","TokenButton","TokenList","chainId","onSelectToken","balances","allTokens","activeTokens","supportedTokenAddresses","addActiveToken","removeActiveToken","width","height","containerRef","buttonRef","scrollContainerRef","overflow","setOverflow","editMode","setEditMode","tokenQuery","setTokenQuery","t","sortedTokens","filteredTokens","Object","values","sortedFilteredTokens","sortedInactiveTokens","filter","el","includes","inactiveTokens","slice","current","offsetTop","scrollHeight","buttonHeight","offsetHeight","e","currentTarget","value","length","map","token","address","decimals","tokenAddress"],"mappings":"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","sourcesContent":["import { useState, useMemo, useRef, useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { TokenInfo } from \"@airswap/types\";\nimport { formatUnits } from \"@ethersproject/units\";\n\nimport nativeETH from \"../../constants/nativeETH\";\nimport { BalancesState } from \"../../features/balances/balancesSlice\";\nimport useWindowSize from \"../../helpers/useWindowSize\";\nimport { OverlayActionButton } from \"../Overlay/Overlay.styles\";\nimport { InfoHeading } from \"../Typography/Typography\";\nimport {\n  Container,\n  SearchInput,\n  TokenContainer,\n  Legend,\n  LegendItem,\n  LegendDivider,\n  StyledScrollContainer,\n  ContentContainer,\n  NoResultsContainer,\n} from \"./TokenList.styles\";\nimport { filterTokens } from \"./filter\";\nimport { sortTokenByExactMatch, sortTokensBySymbolAndBalance } from \"./sort\";\nimport InactiveTokensList from \"./subcomponents/InactiveTokensList/InactiveTokensList\";\nimport TokenButton from \"./subcomponents/TokenButton/TokenButton\";\n\nexport type TokenListProps = {\n  /**\n   * ID of currently connected chain\n   */\n  chainId: number;\n  /**\n   * Called when a token has been seleced.\n   */\n  onSelectToken: (val: string) => void;\n  /**\n   * Balances for current tokens in wallet\n   */\n  balances: BalancesState;\n  /**\n   * all Token addresses in metadata.\n   */\n  allTokens: TokenInfo[];\n  /**\n   * All active tokens.\n   */\n  activeTokens: TokenInfo[];\n  /**\n   * Supported tokens according to registry\n   */\n  supportedTokenAddresses: string[];\n  /**\n   * function to handle adding active tokens (dispatches addActiveToken).\n   */\n  addActiveToken: (val: string) => void;\n  /**\n   * function to handle removing active tokens (dispatches removeActiveToken).\n   */\n  removeActiveToken: (val: string) => void;\n};\n\nconst TokenList = ({\n  chainId,\n  onSelectToken,\n  balances,\n  allTokens,\n  activeTokens = [],\n  supportedTokenAddresses,\n  addActiveToken,\n  removeActiveToken,\n}: TokenListProps) => {\n  const { width, height } = useWindowSize();\n  const containerRef = useRef<HTMLDivElement>(null);\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const scrollContainerRef = useRef<HTMLDivElement>(null);\n  const [overflow, setOverflow] = useState(false);\n  const [editMode, setEditMode] = useState(false);\n\n  const [tokenQuery, setTokenQuery] = useState<string>(\"\");\n  const { t } = useTranslation();\n\n  // sort tokens based on symbol\n  const sortedTokens: TokenInfo[] = useMemo(() => {\n    return sortTokensBySymbolAndBalance(activeTokens, balances);\n  }, [activeTokens, balances]);\n\n  // filter token\n  const filteredTokens: TokenInfo[] = useMemo(() => {\n    return filterTokens(Object.values(sortedTokens), tokenQuery);\n  }, [sortedTokens, tokenQuery]);\n\n  const sortedFilteredTokens: TokenInfo[] = useMemo(() => {\n    return sortTokenByExactMatch(filteredTokens, tokenQuery);\n  }, [filteredTokens, tokenQuery]);\n\n  // sort inactive tokens based on symbol\n  const sortedInactiveTokens: TokenInfo[] = useMemo(() => {\n    return sortTokenByExactMatch(\n      allTokens.filter((el) => {\n        return !activeTokens.includes(el);\n      }),\n      tokenQuery\n    );\n  }, [allTokens, activeTokens, tokenQuery]);\n\n  // only take the top 10 tokens\n  const inactiveTokens: TokenInfo[] = useMemo(() => {\n    return filterTokens(Object.values(sortedInactiveTokens), tokenQuery!).slice(\n      0,\n      10\n    );\n  }, [sortedInactiveTokens, tokenQuery]);\n\n  useEffect(() => {\n    if (\n      containerRef.current &&\n      scrollContainerRef.current &&\n      buttonRef.current\n    ) {\n      const { offsetTop, scrollHeight } = scrollContainerRef.current;\n      const { scrollHeight: buttonHeight } = buttonRef.current;\n      setOverflow(\n        scrollHeight + offsetTop + buttonHeight >\n          containerRef.current.offsetHeight\n      );\n    }\n  }, [\n    containerRef,\n    scrollContainerRef,\n    activeTokens,\n    sortedTokens,\n    allTokens,\n    tokenQuery,\n    width,\n    height,\n  ]);\n\n  return (\n    <Container ref={containerRef}>\n      <ContentContainer>\n        <SearchInput\n          hideLabel\n          id=\"tokenQuery\"\n          type=\"text\"\n          label={t(\"orders.searchByNameOrAddress\")}\n          value={tokenQuery}\n          placeholder={t(\"orders.searchByNameOrAddress\")}\n          onChange={(e) => {\n            setTokenQuery(e.currentTarget.value);\n          }}\n        />\n\n        <StyledScrollContainer ref={scrollContainerRef} $overflow={overflow}>\n          <Legend>\n            <LegendItem>{t(\"common.token\")}</LegendItem>\n            <LegendDivider />\n            <LegendItem>{t(\"balances.balance\")}</LegendItem>\n          </Legend>\n\n          {sortedFilteredTokens && sortedFilteredTokens.length > 0 && (\n            <TokenContainer>\n              {[nativeETH[chainId], ...sortedFilteredTokens].map((token) => (\n                <TokenButton\n                  showDeleteButton={\n                    editMode && token.address !== nativeETH[chainId].address\n                  }\n                  token={token}\n                  balance={formatUnits(\n                    balances.values[token.address] || 0,\n                    token.decimals\n                  )}\n                  setToken={onSelectToken}\n                  removeActiveToken={removeActiveToken}\n                  key={token.address}\n                />\n              ))}\n            </TokenContainer>\n          )}\n          {inactiveTokens.length !== 0 &&\n            tokenQuery &&\n            sortedFilteredTokens.length < 5 && (\n              <InactiveTokensList\n                inactiveTokens={inactiveTokens}\n                supportedTokenAddresses={supportedTokenAddresses}\n                onTokenClick={(tokenAddress) => {\n                  addActiveToken(tokenAddress);\n                  setTokenQuery(\"\");\n                }}\n              />\n            )}\n          {sortedFilteredTokens.length === 0 && inactiveTokens.length === 0 && (\n            <NoResultsContainer>\n              <InfoHeading>{t(\"common.noResultsFound\")}</InfoHeading>\n            </NoResultsContainer>\n          )}\n        </StyledScrollContainer>\n        <OverlayActionButton\n          intent=\"primary\"\n          ref={buttonRef}\n          onClick={() => setEditMode(!editMode)}\n        >\n          {editMode ? t(\"common.done\") : t(\"orders.editCustomTokens\")}\n        </OverlayActionButton>\n      </ContentContainer>\n    </Container>\n  );\n};\n\nexport default TokenList;\n"]},"metadata":{},"sourceType":"module"}