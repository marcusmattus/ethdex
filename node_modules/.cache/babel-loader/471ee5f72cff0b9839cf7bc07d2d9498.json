{"ast":null,"code":"var _jsxFileName = \"/Users/marcusmattus/ethdex/src/components/Toasts/ToastController.tsx\";\nimport toast from \"react-hot-toast\";\nimport { findTokenByAddress } from \"@airswap/metadata\";\nimport findEthOrTokenByAddress from \"../../helpers/findEthOrTokenByAddress\";\nimport ErrorToast from \"./ErrorToast\";\nimport TransactionToast from \"./TransactionToast\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const notifyTransaction = (type, transaction, tokens, error, chainId) => {\n  let token; // TODO: make a switch case to render a different toast for each case\n\n  if ((type === \"Order\" || type === \"Deposit\" || type === \"Withdraw\") && chainId) {\n    const tx = transaction;\n    /*  TODO: fix toaster for multiple tabs or apps\n        now that we have a listener, you can have multiple\n        tabs open that receives the same order event. Only one redux\n        store will have the order, and the others won't. That will\n        throw an error here if we don't check for `order` inside `tx`\n     */\n\n    if (tx === null || tx === void 0 ? void 0 : tx.order) {\n      const senderToken = findEthOrTokenByAddress(tx.order.senderToken, tokens, chainId);\n      const signerToken = findEthOrTokenByAddress(tx.order.signerToken, tokens, chainId);\n      toast(t => /*#__PURE__*/_jsxDEV(TransactionToast, {\n        onClose: () => toast.dismiss(t.id),\n        type: type,\n        transaction: transaction,\n        senderToken: senderToken,\n        signerToken: signerToken,\n        error: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), {\n        duration: 3000\n      });\n    }\n  } else {\n    const tx = transaction;\n    token = findTokenByAddress(tx.tokenAddress, tokens);\n    toast(t => /*#__PURE__*/_jsxDEV(TransactionToast, {\n      onClose: () => toast.dismiss(t.id),\n      type: type,\n      transaction: transaction,\n      approvalToken: token,\n      error: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this), {\n      duration: 3000\n    });\n  }\n};\nexport const notifyError = props => {\n  toast(t => /*#__PURE__*/_jsxDEV(ErrorToast, {\n    onClose: () => toast.dismiss(t.id),\n    heading: props.heading,\n    cta: props.cta\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 7\n  }, this), {\n    duration: 3000\n  });\n};","map":{"version":3,"sources":["/Users/marcusmattus/ethdex/src/components/Toasts/ToastController.tsx"],"names":["toast","findTokenByAddress","findEthOrTokenByAddress","ErrorToast","TransactionToast","notifyTransaction","type","transaction","tokens","error","chainId","token","tx","order","senderToken","signerToken","t","dismiss","id","duration","tokenAddress","notifyError","props","heading","cta"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,iBAAlB;AAEA,SAASC,kBAAT,QAAmC,mBAAnC;AAUA,OAAOC,uBAAP,MAAoC,uCAApC;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;;AAEA,OAAO,MAAMC,iBAAiB,GAAG,CAC/BC,IAD+B,EAE/BC,WAF+B,EAO/BC,MAP+B,EAQ/BC,KAR+B,EAS/BC,OAT+B,KAU5B;AACH,MAAIC,KAAJ,CADG,CAEH;;AACA,MACE,CAACL,IAAI,KAAK,OAAT,IAAoBA,IAAI,KAAK,SAA7B,IAA0CA,IAAI,KAAK,UAApD,KACAI,OAFF,EAGE;AACA,UAAME,EAAiC,GAAGL,WAA1C;AACA;AACJ;AACA;AACA;AACA;AACA;;AACI,QAAIK,EAAJ,aAAIA,EAAJ,uBAAIA,EAAE,CAAEC,KAAR,EAAe;AACb,YAAMC,WAAW,GAAGZ,uBAAuB,CACzCU,EAAE,CAACC,KAAH,CAASC,WADgC,EAEzCN,MAFyC,EAGzCE,OAHyC,CAA3C;AAKA,YAAMK,WAAW,GAAGb,uBAAuB,CACzCU,EAAE,CAACC,KAAH,CAASE,WADgC,EAEzCP,MAFyC,EAGzCE,OAHyC,CAA3C;AAKAV,MAAAA,KAAK,CACFgB,CAAD,iBACE,QAAC,gBAAD;AACE,QAAA,OAAO,EAAE,MAAMhB,KAAK,CAACiB,OAAN,CAAcD,CAAC,CAACE,EAAhB,CADjB;AAEE,QAAA,IAAI,EAAEZ,IAFR;AAGE,QAAA,WAAW,EAAEC,WAHf;AAIE,QAAA,WAAW,EAAEO,WAJf;AAKE,QAAA,WAAW,EAAEC,WALf;AAME,QAAA,KAAK,EAAEN;AANT;AAAA;AAAA;AAAA;AAAA,cAFC,EAWH;AACEU,QAAAA,QAAQ,EAAE;AADZ,OAXG,CAAL;AAeD;AACF,GAtCD,MAsCO;AACL,UAAMP,EAAqB,GAAGL,WAA9B;AACAI,IAAAA,KAAK,GAAGV,kBAAkB,CAACW,EAAE,CAACQ,YAAJ,EAAkBZ,MAAlB,CAA1B;AACAR,IAAAA,KAAK,CACFgB,CAAD,iBACE,QAAC,gBAAD;AACE,MAAA,OAAO,EAAE,MAAMhB,KAAK,CAACiB,OAAN,CAAcD,CAAC,CAACE,EAAhB,CADjB;AAEE,MAAA,IAAI,EAAEZ,IAFR;AAGE,MAAA,WAAW,EAAEC,WAHf;AAIE,MAAA,aAAa,EAAEI,KAJjB;AAKE,MAAA,KAAK,EAAEF;AALT;AAAA;AAAA;AAAA;AAAA,YAFC,EAUH;AACEU,MAAAA,QAAQ,EAAE;AADZ,KAVG,CAAL;AAcD;AACF,CArEM;AAuEP,OAAO,MAAME,WAAW,GAAIC,KAAD,IAA6C;AACtEtB,EAAAA,KAAK,CACFgB,CAAD,iBACE,QAAC,UAAD;AACE,IAAA,OAAO,EAAE,MAAMhB,KAAK,CAACiB,OAAN,CAAcD,CAAC,CAACE,EAAhB,CADjB;AAEE,IAAA,OAAO,EAAEI,KAAK,CAACC,OAFjB;AAGE,IAAA,GAAG,EAAED,KAAK,CAACE;AAHb;AAAA;AAAA;AAAA;AAAA,UAFC,EAQH;AACEL,IAAAA,QAAQ,EAAE;AADZ,GARG,CAAL;AAYD,CAbM","sourcesContent":["import toast from \"react-hot-toast\";\n\nimport { findTokenByAddress } from \"@airswap/metadata\";\nimport { TokenInfo } from \"@airswap/types\";\n\nimport {\n  SubmittedApproval,\n  SubmittedDepositOrder,\n  SubmittedTransactionWithOrder,\n  SubmittedWithdrawOrder,\n  TransactionType,\n} from \"../../features/transactions/transactionsSlice\";\nimport findEthOrTokenByAddress from \"../../helpers/findEthOrTokenByAddress\";\nimport ErrorToast from \"./ErrorToast\";\nimport TransactionToast from \"./TransactionToast\";\n\nexport const notifyTransaction = (\n  type: TransactionType,\n  transaction:\n    | SubmittedTransactionWithOrder\n    | SubmittedApproval\n    | SubmittedDepositOrder\n    | SubmittedWithdrawOrder,\n  tokens: TokenInfo[],\n  error: boolean,\n  chainId?: number\n) => {\n  let token: TokenInfo;\n  // TODO: make a switch case to render a different toast for each case\n  if (\n    (type === \"Order\" || type === \"Deposit\" || type === \"Withdraw\") &&\n    chainId\n  ) {\n    const tx: SubmittedTransactionWithOrder = transaction as SubmittedTransactionWithOrder;\n    /*  TODO: fix toaster for multiple tabs or apps\n        now that we have a listener, you can have multiple\n        tabs open that receives the same order event. Only one redux\n        store will have the order, and the others won't. That will\n        throw an error here if we don't check for `order` inside `tx`\n     */\n    if (tx?.order) {\n      const senderToken = findEthOrTokenByAddress(\n        tx.order.senderToken,\n        tokens,\n        chainId\n      );\n      const signerToken = findEthOrTokenByAddress(\n        tx.order.signerToken,\n        tokens,\n        chainId\n      );\n      toast(\n        (t) => (\n          <TransactionToast\n            onClose={() => toast.dismiss(t.id)}\n            type={type}\n            transaction={transaction}\n            senderToken={senderToken}\n            signerToken={signerToken}\n            error={error}\n          />\n        ),\n        {\n          duration: 3000,\n        }\n      );\n    }\n  } else {\n    const tx: SubmittedApproval = transaction as SubmittedApproval;\n    token = findTokenByAddress(tx.tokenAddress, tokens);\n    toast(\n      (t) => (\n        <TransactionToast\n          onClose={() => toast.dismiss(t.id)}\n          type={type}\n          transaction={transaction}\n          approvalToken={token}\n          error={error}\n        />\n      ),\n      {\n        duration: 3000,\n      }\n    );\n  }\n};\n\nexport const notifyError = (props: { heading: string; cta: string }) => {\n  toast(\n    (t) => (\n      <ErrorToast\n        onClose={() => toast.dismiss(t.id)}\n        heading={props.heading}\n        cta={props.cta}\n      />\n    ),\n    {\n      duration: 3000,\n    }\n  );\n};\n"]},"metadata":{},"sourceType":"module"}