{"ast":null,"code":"import { store } from \"../../app/store\";\nimport { getActiveTokensLocalStorageKey, getTransactionsLocalStorageKey } from \"./metadataApi\";\nexport const subscribeToSavedTokenChangesForLocalStoragePersisting = () => {\n  const activeTokensCache = {};\n  const transactionCache = {};\n  let currentChainId;\n  let currentTransaction;\n  store.subscribe(() => {\n    const {\n      wallet,\n      metadata,\n      transactions\n    } = store.getState();\n    if (!wallet.connected) return;\n    let previousChainId = currentChainId;\n    currentChainId = wallet.chainId;\n    let previousTransaction = currentTransaction;\n    currentTransaction = transactions;\n\n    if (previousTransaction !== currentTransaction || previousChainId !== currentChainId) {\n      // handles change in transactions and persists all transactions to localStorage\n      // Store only the top 10 transactions\n      const txs = JSON.parse(localStorage.getItem(getTransactionsLocalStorageKey(wallet.address, wallet.chainId))) || {\n        all: []\n      };\n      const mostRecentTransactions = transactions.all;\n\n      if (transactionCache[wallet.address] === undefined) {\n        transactionCache[wallet.address] = {};\n        transactionCache[wallet.address][wallet.chainId] = txs.all.slice(0, 10);\n      }\n\n      if (previousChainId === currentChainId && transactions.all.length && transactionCache[wallet.address][wallet.chainId] !== transactions.all) {\n        transactionCache[wallet.address][wallet.chainId] = mostRecentTransactions;\n        localStorage.setItem(getTransactionsLocalStorageKey(wallet.address, wallet.chainId), JSON.stringify({\n          all: mostRecentTransactions\n        }));\n      }\n    }\n\n    if (!activeTokensCache[wallet.address]) {\n      activeTokensCache[wallet.address] = {};\n    }\n\n    const cachedTokensForActiveWallet = activeTokensCache[wallet.address][wallet.chainId];\n\n    if (metadata.tokens.active.length && cachedTokensForActiveWallet !== metadata.tokens.active) {\n      // active tokens have changed, persist to local storage.\n      activeTokensCache[wallet.address][wallet.chainId] = metadata.tokens.active;\n      localStorage.setItem(getActiveTokensLocalStorageKey(wallet.address, wallet.chainId), metadata.tokens.active.join(\",\"));\n    }\n  });\n};","map":{"version":3,"sources":["/Users/marcusmattus/ethdex/airswap-web/src/features/metadata/metadataSubscriber.ts"],"names":["store","getActiveTokensLocalStorageKey","getTransactionsLocalStorageKey","subscribeToSavedTokenChangesForLocalStoragePersisting","activeTokensCache","transactionCache","currentChainId","currentTransaction","subscribe","wallet","metadata","transactions","getState","connected","previousChainId","chainId","previousTransaction","txs","JSON","parse","localStorage","getItem","address","all","mostRecentTransactions","undefined","slice","length","setItem","stringify","cachedTokensForActiveWallet","tokens","active","join"],"mappings":"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","sourcesContent":["import { store } from \"../../app/store\";\nimport {\n  SubmittedTransaction,\n  TransactionsState,\n} from \"../transactions/transactionsSlice\";\nimport {\n  getActiveTokensLocalStorageKey,\n  getTransactionsLocalStorageKey,\n} from \"./metadataApi\";\n\nexport const subscribeToSavedTokenChangesForLocalStoragePersisting = () => {\n  const activeTokensCache: {\n    [address: string]: {\n      [chainId: number]: string[];\n    };\n  } = {};\n  const transactionCache: {\n    [address: string]: {\n      [chainId: number]: SubmittedTransaction[];\n    };\n  } = {};\n\n  let currentChainId: number;\n  let currentTransaction: TransactionsState;\n\n  store.subscribe(() => {\n    const { wallet, metadata, transactions } = store.getState();\n    if (!wallet.connected) return;\n\n    let previousChainId = currentChainId;\n    currentChainId = wallet.chainId!;\n\n    let previousTransaction = currentTransaction;\n    currentTransaction = transactions;\n\n    if (\n      previousTransaction !== currentTransaction ||\n      previousChainId !== currentChainId\n    ) {\n      // handles change in transactions and persists all transactions to localStorage\n      // Store only the top 10 transactions\n      const txs: TransactionsState = JSON.parse(\n        localStorage.getItem(\n          getTransactionsLocalStorageKey(wallet.address!, wallet.chainId!)\n        )!\n      ) || { all: [] };\n\n      const mostRecentTransactions = transactions.all;\n\n      if (transactionCache[wallet.address!] === undefined) {\n        transactionCache[wallet.address!] = {};\n        transactionCache[wallet.address!][wallet.chainId!] = txs.all.slice(\n          0,\n          10\n        );\n      }\n      if (\n        previousChainId === currentChainId &&\n        transactions.all.length &&\n        transactionCache[wallet.address!][wallet.chainId!] !== transactions.all\n      ) {\n        transactionCache[wallet.address!][\n          wallet.chainId!\n        ] = mostRecentTransactions;\n        localStorage.setItem(\n          getTransactionsLocalStorageKey(wallet.address!, wallet.chainId!),\n          JSON.stringify({\n            all: mostRecentTransactions,\n          })\n        );\n      }\n    }\n\n    if (!activeTokensCache[wallet.address!]) {\n      activeTokensCache[wallet.address!] = {};\n    }\n    const cachedTokensForActiveWallet =\n      activeTokensCache[wallet.address!][wallet.chainId!];\n    if (\n      metadata.tokens.active.length &&\n      cachedTokensForActiveWallet !== metadata.tokens.active\n    ) {\n      // active tokens have changed, persist to local storage.\n      activeTokensCache[wallet.address!][wallet.chainId!] =\n        metadata.tokens.active;\n      localStorage.setItem(\n        getActiveTokensLocalStorageKey(wallet.address!, wallet.chainId!),\n        metadata.tokens.active.join(\",\")\n      );\n    }\n  });\n};\n"]},"metadata":{},"sourceType":"module"}