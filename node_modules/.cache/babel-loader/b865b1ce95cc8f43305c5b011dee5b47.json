{"ast":null,"code":"import { store } from \"../../app/store\";\nimport { decrementBalanceBy, incrementBalanceBy } from \"../balances/balancesSlice\";\n\nconst handleWrapEvent = (data, dispatch) => {\n  const transactions = store.getState().transactions;\n  const transaction = transactions.all.find(t => t.hash === data[2].transactionHash) || null; // If we don't have a 'transaction', we don't already know about this swap\n  // and therefore don't need to update the UI.\n\n  if (!transaction) return;\n  dispatch(decrementBalanceBy({\n    tokenAddress: transaction.order.senderToken,\n    amount: transaction.order.senderAmount\n  }));\n  dispatch(incrementBalanceBy({\n    tokenAddress: transaction.order.signerToken,\n    amount: transaction.order.senderAmount\n  }));\n};\n\nexport default function subscribeToWrapEvents(params) {\n  const {\n    wrapContract,\n    dispatch\n  } = params;\n  wrapContract.on(\"Deposit\", async (...data) => handleWrapEvent(data, dispatch));\n  wrapContract.on(\"Withdrawal\", async (...data) => handleWrapEvent(data, dispatch));\n}","map":{"version":3,"sources":["/Users/marcusmattus/ethdex/airswap-web/src/features/transactions/wrapEventSubscriber.ts"],"names":["store","decrementBalanceBy","incrementBalanceBy","handleWrapEvent","data","dispatch","transactions","getState","transaction","all","find","t","hash","transactionHash","tokenAddress","order","senderToken","amount","senderAmount","signerToken","subscribeToWrapEvents","params","wrapContract","on"],"mappings":"AAKA,SAASA,KAAT,QAAsB,iBAAtB;AACA,SACEC,kBADF,EAEEC,kBAFF,QAGO,2BAHP;;AAMA,MAAMC,eAAe,GAAG,CAACC,IAAD,EAAYC,QAAZ,KAA8B;AACpD,QAAMC,YAAY,GAAGN,KAAK,CAACO,QAAN,GAAiBD,YAAtC;AAEA,QAAME,WAAiD,GACpDF,YAAY,CAACG,GAAb,CAAiBC,IAAjB,CACEC,CAAD,IAAYA,CAAC,CAACC,IAAF,KAAWR,IAAI,CAAC,CAAD,CAAJ,CAAQS,eADhC,CAAD,IAEuC,IAHzC,CAHoD,CAQpD;AACA;;AACA,MAAI,CAACL,WAAL,EAAkB;AAElBH,EAAAA,QAAQ,CACNJ,kBAAkB,CAAC;AACjBa,IAAAA,YAAY,EAAEN,WAAW,CAACO,KAAZ,CAAkBC,WADf;AAEjBC,IAAAA,MAAM,EAAET,WAAW,CAACO,KAAZ,CAAkBG;AAFT,GAAD,CADZ,CAAR;AAMAb,EAAAA,QAAQ,CACNH,kBAAkB,CAAC;AACjBY,IAAAA,YAAY,EAAEN,WAAW,CAACO,KAAZ,CAAkBI,WADf;AAEjBF,IAAAA,MAAM,EAAET,WAAW,CAACO,KAAZ,CAAkBG;AAFT,GAAD,CADZ,CAAR;AAMD,CAxBD;;AA0BA,eAAe,SAASE,qBAAT,CAA+BC,MAA/B,EAIZ;AACD,QAAM;AAAEC,IAAAA,YAAF;AAAgBjB,IAAAA;AAAhB,MAA6BgB,MAAnC;AACAC,EAAAA,YAAY,CAACC,EAAb,CAAgB,SAAhB,EAA2B,OAAO,GAAGnB,IAAV,KACzBD,eAAe,CAACC,IAAD,EAAOC,QAAP,CADjB;AAGAiB,EAAAA,YAAY,CAACC,EAAb,CAAgB,YAAhB,EAA8B,OAAO,GAAGnB,IAAV,KAC5BD,eAAe,CAACC,IAAD,EAAOC,QAAP,CADjB;AAGD","sourcesContent":["import { Web3Provider } from \"@ethersproject/providers\";\nimport { Dispatch } from \"@reduxjs/toolkit\";\n\nimport { Contract } from \"ethers\";\n\nimport { store } from \"../../app/store\";\nimport {\n  decrementBalanceBy,\n  incrementBalanceBy,\n} from \"../balances/balancesSlice\";\nimport { SubmittedTransactionWithOrder } from \"./transactionsSlice\";\n\nconst handleWrapEvent = (data: any, dispatch: any) => {\n  const transactions = store.getState().transactions;\n\n  const transaction: SubmittedTransactionWithOrder | null =\n    (transactions.all.find(\n      (t: any) => t.hash === data[2].transactionHash\n    ) as SubmittedTransactionWithOrder) || null;\n\n  // If we don't have a 'transaction', we don't already know about this swap\n  // and therefore don't need to update the UI.\n  if (!transaction) return;\n\n  dispatch(\n    decrementBalanceBy({\n      tokenAddress: transaction.order.senderToken,\n      amount: transaction.order.senderAmount,\n    })\n  );\n  dispatch(\n    incrementBalanceBy({\n      tokenAddress: transaction.order.signerToken,\n      amount: transaction.order.senderAmount,\n    })\n  );\n};\n\nexport default function subscribeToWrapEvents(params: {\n  wrapContract: Contract;\n  library: Web3Provider;\n  dispatch: Dispatch;\n}) {\n  const { wrapContract, dispatch } = params;\n  wrapContract.on(\"Deposit\", async (...data) =>\n    handleWrapEvent(data, dispatch)\n  );\n  wrapContract.on(\"Withdrawal\", async (...data) =>\n    handleWrapEvent(data, dispatch)\n  );\n}\n"]},"metadata":{},"sourceType":"module"}