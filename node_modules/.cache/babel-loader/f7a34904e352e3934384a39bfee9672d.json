{"ast":null,"code":"'use strict';\n\nconst http = require('http');\n\nconst url = require('url');\n\nconst utils = require('../utils');\n\nconst Client = require('../client');\n\nconst {\n  version\n} = require('../../package.json');\n/**\n *  Constructor for a Jayson HTTP Client\n *  @class ClientHttp\n *  @constructor\n *  @extends Client\n *  @param {Object|String} [options] String interpreted as a URL\n *  @param {String} [options.encoding=\"utf8\"] Encoding to use\n *  @return {ClientHttp}\n */\n\n\nconst ClientHttp = function (options) {\n  // accept first parameter as a url string\n  if (typeof options === 'string') {\n    options = url.parse(options);\n  }\n\n  if (!(this instanceof ClientHttp)) {\n    return new ClientHttp(options);\n  }\n\n  Client.call(this, options);\n  const defaults = utils.merge(this.options, {\n    encoding: 'utf8'\n  });\n  this.options = utils.merge(defaults, options || {});\n};\n\nrequire('util').inherits(ClientHttp, Client);\n\nmodule.exports = ClientHttp;\n\nClientHttp.prototype._request = function (request, callback) {\n  const self = this; // copies options so object can be modified in this context\n\n  const options = utils.merge({}, this.options);\n  utils.JSON.stringify(request, options, function (err, body) {\n    if (err) {\n      return callback(err);\n    }\n\n    options.method = options.method || 'POST';\n    const headers = {\n      'Content-Length': Buffer.byteLength(body, options.encoding),\n      'Content-Type': 'application/json; charset=utf-8',\n      Accept: 'application/json',\n      'User-Agent': `jayson-${version}`\n    }; // let user override the headers\n\n    options.headers = utils.merge(headers, options.headers || {});\n\n    const req = self._getRequestStream(options);\n\n    self.emit('http request', req);\n    req.on('response', function (res) {\n      self.emit('http response', res, req);\n      res.setEncoding(options.encoding);\n      let data = '';\n      res.on('data', function (chunk) {\n        data += chunk;\n      });\n      res.on('end', function () {\n        // assume we have an error\n        if (res.statusCode < 200 || res.statusCode >= 300) {\n          // assume the server gave the reason in the body\n          const err = new Error(data);\n          err.code = res.statusCode;\n          callback(err);\n        } else {\n          // empty reply\n          if (!data || typeof data !== 'string') {\n            return callback();\n          }\n\n          utils.JSON.parse(data, options, callback);\n        }\n      });\n    }); // abort on timeout\n\n    req.on('timeout', function () {\n      req.abort(); // req.abort causes \"error\" event\n    }); // abort on error\n\n    req.on('error', function (err) {\n      self.emit('http error', err);\n      callback(err);\n      req.abort();\n    });\n    req.end(body);\n  });\n};\n/**\n *  Gets a stream interface to a http server\n *  @param {Object} options An options object\n *  @return {require('http').ClientRequest}\n *  @private\n */\n\n\nClientHttp.prototype._getRequestStream = function (options) {\n  return http.request(options || {});\n};","map":{"version":3,"sources":["/Users/marcusmattus/ethdex/airswap-web/node_modules/jayson/lib/client/http.js"],"names":["http","require","url","utils","Client","version","ClientHttp","options","parse","call","defaults","merge","encoding","inherits","module","exports","prototype","_request","request","callback","self","JSON","stringify","err","body","method","headers","Buffer","byteLength","Accept","req","_getRequestStream","emit","on","res","setEncoding","data","chunk","statusCode","Error","code","abort","end"],"mappings":"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","sourcesContent":["'use strict';\n\nconst http = require('http');\nconst url = require('url');\nconst utils = require('../utils');\nconst Client = require('../client');\nconst { version } = require('../../package.json');\n\n/**\n *  Constructor for a Jayson HTTP Client\n *  @class ClientHttp\n *  @constructor\n *  @extends Client\n *  @param {Object|String} [options] String interpreted as a URL\n *  @param {String} [options.encoding=\"utf8\"] Encoding to use\n *  @return {ClientHttp}\n */\nconst ClientHttp = function(options) {\n  // accept first parameter as a url string\n  if(typeof(options) === 'string') {\n    options = url.parse(options);\n  }\n\n  if(!(this instanceof ClientHttp)) {\n    return new ClientHttp(options);\n  }\n  Client.call(this, options);\n\n  const defaults = utils.merge(this.options, {\n    encoding: 'utf8'\n  });\n\n  this.options = utils.merge(defaults, options || {});\n};\nrequire('util').inherits(ClientHttp, Client);\n\nmodule.exports = ClientHttp;\n\nClientHttp.prototype._request = function(request, callback) {\n  const self = this;\n  // copies options so object can be modified in this context\n  const options = utils.merge({}, this.options);\n\n  utils.JSON.stringify(request, options, function(err, body) {\n    if(err) {\n      return callback(err);\n    }\n\n    options.method = options.method || 'POST';\n\n    const headers = {\n      'Content-Length': Buffer.byteLength(body, options.encoding),\n      'Content-Type': 'application/json; charset=utf-8',\n      Accept: 'application/json',\n      'User-Agent': `jayson-${version}`,\n    };\n\n    // let user override the headers\n    options.headers = utils.merge(headers, options.headers || {});\n\n    const req = self._getRequestStream(options);\n\n    self.emit('http request', req);\n\n    req.on('response', function(res) {\n      self.emit('http response', res, req);\n\n      res.setEncoding(options.encoding);\n\n      let data = '';\n      res.on('data', function(chunk) { data += chunk; });\n\n      res.on('end', function() {\n\n        // assume we have an error\n        if(res.statusCode < 200 || res.statusCode >= 300) {\n          // assume the server gave the reason in the body\n          const err = new Error(data);\n          err.code = res.statusCode;\n          callback(err);\n        } else {\n          // empty reply\n          if(!data || typeof(data) !== 'string') {\n            return callback();\n          }\n          utils.JSON.parse(data, options, callback);\n        }\n      });\n\n    });\n\n    // abort on timeout\n    req.on('timeout', function() {\n      req.abort(); // req.abort causes \"error\" event\n    });\n\n    // abort on error\n    req.on('error', function(err) {\n      self.emit('http error', err);\n      callback(err);\n      req.abort();\n    });\n\n    req.end(body);\n  });\n};\n\n/**\n *  Gets a stream interface to a http server\n *  @param {Object} options An options object\n *  @return {require('http').ClientRequest}\n *  @private\n */\nClientHttp.prototype._getRequestStream = function(options) {\n  return http.request(options || {});\n};\n"]},"metadata":{},"sourceType":"script"}