{"ast":null,"code":"import { findTokenByAddress } from \"@airswap/metadata\";\nimport nativeETH from \"../constants/nativeETH\";\nexport default function findEthOrTokenByAddress(tokenAddress, activeTokens, chainId) {\n  return tokenAddress === \"0x0000000000000000000000000000000000000000\" ? nativeETH[chainId] : findTokenByAddress(tokenAddress, activeTokens);\n}","map":{"version":3,"sources":["/Users/marcusmattus/ethdex/airswap-web/src/helpers/findEthOrTokenByAddress.ts"],"names":["findTokenByAddress","nativeETH","findEthOrTokenByAddress","tokenAddress","activeTokens","chainId"],"mappings":"AAAA,SAASA,kBAAT,QAAmC,mBAAnC;AAGA,OAAOC,SAAP,MAAsB,wBAAtB;AAEA,eAAe,SAASC,uBAAT,CACbC,YADa,EAEbC,YAFa,EAGbC,OAHa,EAIb;AACA,SAAOF,YAAY,KAAK,4CAAjB,GACHF,SAAS,CAACI,OAAD,CADN,GAEHL,kBAAkB,CAACG,YAAD,EAAeC,YAAf,CAFtB;AAGD","sourcesContent":["import { findTokenByAddress } from \"@airswap/metadata\";\nimport { TokenInfo } from \"@uniswap/token-lists\";\n\nimport nativeETH from \"../constants/nativeETH\";\n\nexport default function findEthOrTokenByAddress(\n  tokenAddress: string,\n  activeTokens: TokenInfo[],\n  chainId: number\n) {\n  return tokenAddress === \"0x0000000000000000000000000000000000000000\"\n    ? nativeETH[chainId!]\n    : findTokenByAddress(tokenAddress, activeTokens);\n}\n"]},"metadata":{},"sourceType":"module"}