{"ast":null,"code":"var _jsxFileName = \"/Users/marcusmattus/ethdex/airswap-web/src/components/ProgressBar/ProgressBar.tsx\";\nimport { Track, Progress } from \"./ProgressBar.styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ProgressBar = ({\n  startTime,\n  endTime\n}) => {\n  const now = Date.now();\n  const done = now - startTime;\n  const left = endTime - startTime;\n  const fractionDone = done / left;\n  return /*#__PURE__*/_jsxDEV(Track, {\n    children: /*#__PURE__*/_jsxDEV(Progress, {\n      animate: {\n        scaleX: 1\n      },\n      initial: {\n        scaleX: fractionDone\n      },\n      transition: {\n        ease: \"linear\",\n        duration: left / 1000\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n};\n\n_c = ProgressBar;\nexport default ProgressBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProgressBar\");","map":{"version":3,"sources":["/Users/marcusmattus/ethdex/airswap-web/src/components/ProgressBar/ProgressBar.tsx"],"names":["Track","Progress","ProgressBar","startTime","endTime","now","Date","done","left","fractionDone","scaleX","ease","duration"],"mappings":";AAEA,SAASA,KAAT,EAAgBC,QAAhB,QAAgC,sBAAhC;;;AAEA,MAAMC,WAGJ,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAD,KAA4B;AAC/B,QAAMC,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ;AACA,QAAME,IAAI,GAAGF,GAAG,GAAGF,SAAnB;AACA,QAAMK,IAAI,GAAGJ,OAAO,GAAGD,SAAvB;AACA,QAAMM,YAAY,GAAGF,IAAI,GAAGC,IAA5B;AACA,sBACE,QAAC,KAAD;AAAA,2BACE,QAAC,QAAD;AACE,MAAA,OAAO,EAAE;AAAEE,QAAAA,MAAM,EAAE;AAAV,OADX;AAEE,MAAA,OAAO,EAAE;AAAEA,QAAAA,MAAM,EAAED;AAAV,OAFX;AAGE,MAAA,UAAU,EAAE;AAAEE,QAAAA,IAAI,EAAE,QAAR;AAAkBC,QAAAA,QAAQ,EAAEJ,IAAI,GAAG;AAAnC;AAHd;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CAjBD;;KAAMN,W;AAmBN,eAAeA,WAAf","sourcesContent":["import { FC } from \"react\";\n\nimport { Track, Progress } from \"./ProgressBar.styles\";\n\nconst ProgressBar: FC<{\n  startTime: number;\n  endTime: number;\n}> = ({ startTime, endTime }) => {\n  const now = Date.now();\n  const done = now - startTime;\n  const left = endTime - startTime;\n  const fractionDone = done / left;\n  return (\n    <Track>\n      <Progress\n        animate={{ scaleX: 1 }}\n        initial={{ scaleX: fractionDone }}\n        transition={{ ease: \"linear\", duration: left / 1000 }}\n      />\n    </Track>\n  );\n};\n\nexport default ProgressBar;\n"]},"metadata":{},"sourceType":"module"}