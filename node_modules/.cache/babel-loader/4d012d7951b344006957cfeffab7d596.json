{"ast":null,"code":"import { calculateCostFromLevels } from \"@airswap/utils\";\nimport { BigNumber } from \"bignumber.js\";\nexport function pricingIsLevels(value) {\n  return typeof value !== \"string\";\n}\n/**\n * Calculates the quote amount from pricing, given a base amount, fee, and\n * pricing.\n */\n\nexport const calculateQuoteAmount = ({\n  baseAmount,\n  side,\n  signerFee,\n  pricing\n}) => {\n  // baseAmount always known.\n  // For a sell, baseAmount is signerAmount.\n  // For a buy, baseAmount is senderAmount.\n  if (side === \"sell\") {\n    const levels = pricing.bid;\n\n    if (!pricingIsLevels(levels)) {\n      throw new Error(\"formulaic pricing not yet supported\");\n    }\n\n    const signerAmount = new BigNumber(baseAmount).dividedBy(1.0007) // .integerValue(BigNumber.ROUND_CEIL)\n    .toString(); // @ts-ignore - TODO: Fix when types updated\n\n    if (pricing.minimum) {\n      // @ts-ignore - TODO: Fix when types updated\n      const minimum = new BigNumber(pricing.minimum);\n\n      if (minimum.isGreaterThan(signerAmount)) {\n        throw new Error(\"Amount too low\");\n      }\n    } // NOTE: this can throw if requested amount exceeds available.\n\n\n    const senderAmount = calculateCostFromLevels(signerAmount.toString(), levels);\n    return senderAmount;\n  } else {\n    // buy order.\n    const levels = pricing.ask;\n\n    if (!pricingIsLevels(levels)) {\n      throw new Error(\"formulaic pricing not yet supported\");\n    }\n\n    const senderAmount = baseAmount; // Fee comes out of signerAmount, so we need to add it to the quoteAmount\n\n    const signerAmount = new BigNumber(calculateCostFromLevels(senderAmount, levels)).multipliedBy(1.0007) // .integerValue(BigNumber.ROUND_FLOOR)\n    .toString();\n    return signerAmount;\n  }\n};","map":{"version":3,"sources":["/Users/marcusmattus/ethdex/airswap-web/src/features/pricing/pricingApi.ts"],"names":["calculateCostFromLevels","BigNumber","pricingIsLevels","value","calculateQuoteAmount","baseAmount","side","signerFee","pricing","levels","bid","Error","signerAmount","dividedBy","toString","minimum","isGreaterThan","senderAmount","ask","multipliedBy"],"mappings":"AACA,SAASA,uBAAT,QAAwC,gBAAxC;AAEA,SAASC,SAAT,QAA0B,cAA1B;AAEA,OAAO,SAASC,eAAT,CAAyBC,KAAzB,EAAmE;AACxE,SAAO,OAAOA,KAAP,KAAiB,QAAxB;AACD;AAED;AACA;AACA;AACA;;AACA,OAAO,MAAMC,oBAKD,GAAG,CAAC;AAAEC,EAAAA,UAAF;AAAcC,EAAAA,IAAd;AAAoBC,EAAAA,SAApB;AAA+BC,EAAAA;AAA/B,CAAD,KAA8C;AAC3D;AACA;AACA;AAEA,MAAIF,IAAI,KAAK,MAAb,EAAqB;AACnB,UAAMG,MAAM,GAAGD,OAAO,CAACE,GAAvB;;AACA,QAAI,CAACR,eAAe,CAACO,MAAD,CAApB,EAA8B;AAC5B,YAAM,IAAIE,KAAJ,CAAU,qCAAV,CAAN;AACD;;AACD,UAAMC,YAAY,GAAG,IAAIX,SAAJ,CAAcI,UAAd,EAClBQ,SADkB,CACR,MADQ,EAEnB;AAFmB,KAGlBC,QAHkB,EAArB,CALmB,CAUnB;;AACA,QAAIN,OAAO,CAACO,OAAZ,EAAqB;AACnB;AACA,YAAMA,OAAO,GAAG,IAAId,SAAJ,CAAcO,OAAO,CAACO,OAAtB,CAAhB;;AACA,UAAIA,OAAO,CAACC,aAAR,CAAsBJ,YAAtB,CAAJ,EAAyC;AACvC,cAAM,IAAID,KAAJ,CAAU,gBAAV,CAAN;AACD;AACF,KAjBkB,CAmBnB;;;AACA,UAAMM,YAAY,GAAGjB,uBAAuB,CAC1CY,YAAY,CAACE,QAAb,EAD0C,EAE1CL,MAF0C,CAA5C;AAKA,WAAOQ,YAAP;AACD,GA1BD,MA0BO;AACL;AACA,UAAMR,MAAM,GAAGD,OAAO,CAACU,GAAvB;;AACA,QAAI,CAAChB,eAAe,CAACO,MAAD,CAApB,EAA8B;AAC5B,YAAM,IAAIE,KAAJ,CAAU,qCAAV,CAAN;AACD;;AACD,UAAMM,YAAY,GAAGZ,UAArB,CANK,CAOL;;AACA,UAAMO,YAAY,GAAG,IAAIX,SAAJ,CACnBD,uBAAuB,CAACiB,YAAD,EAAeR,MAAf,CADJ,EAGlBU,YAHkB,CAGL,MAHK,EAInB;AAJmB,KAKlBL,QALkB,EAArB;AAMA,WAAOF,YAAP;AACD;AACF,CApDM","sourcesContent":["import { Formula, Levels, Pricing } from \"@airswap/types\";\nimport { calculateCostFromLevels } from \"@airswap/utils\";\n\nimport { BigNumber } from \"bignumber.js\";\n\nexport function pricingIsLevels(value: Levels | Formula): value is Levels {\n  return typeof value !== \"string\";\n}\n\n/**\n * Calculates the quote amount from pricing, given a base amount, fee, and\n * pricing.\n */\nexport const calculateQuoteAmount: (params: {\n  baseAmount: string;\n  side: \"buy\" | \"sell\";\n  signerFee: string;\n  pricing: Pricing;\n}) => string = ({ baseAmount, side, signerFee, pricing }) => {\n  // baseAmount always known.\n  // For a sell, baseAmount is signerAmount.\n  // For a buy, baseAmount is senderAmount.\n\n  if (side === \"sell\") {\n    const levels = pricing.bid;\n    if (!pricingIsLevels(levels)) {\n      throw new Error(\"formulaic pricing not yet supported\");\n    }\n    const signerAmount = new BigNumber(baseAmount)\n      .dividedBy(1.0007)\n      // .integerValue(BigNumber.ROUND_CEIL)\n      .toString();\n\n    // @ts-ignore - TODO: Fix when types updated\n    if (pricing.minimum) {\n      // @ts-ignore - TODO: Fix when types updated\n      const minimum = new BigNumber(pricing.minimum);\n      if (minimum.isGreaterThan(signerAmount)) {\n        throw new Error(\"Amount too low\");\n      }\n    }\n\n    // NOTE: this can throw if requested amount exceeds available.\n    const senderAmount = calculateCostFromLevels(\n      signerAmount.toString(),\n      levels\n    );\n\n    return senderAmount;\n  } else {\n    // buy order.\n    const levels = pricing.ask;\n    if (!pricingIsLevels(levels)) {\n      throw new Error(\"formulaic pricing not yet supported\");\n    }\n    const senderAmount = baseAmount;\n    // Fee comes out of signerAmount, so we need to add it to the quoteAmount\n    const signerAmount = new BigNumber(\n      calculateCostFromLevels(senderAmount, levels)\n    )\n      .multipliedBy(1.0007)\n      // .integerValue(BigNumber.ROUND_FLOOR)\n      .toString();\n    return signerAmount;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}