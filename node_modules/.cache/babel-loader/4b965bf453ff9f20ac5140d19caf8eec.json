{"ast":null,"code":"import { createSlice, createSelector } from \"@reduxjs/toolkit\";\nimport BigNumber from \"bignumber.js\";\nimport { clearTradeTerms, selectTradeTerms } from \"../tradeTerms/tradeTermsSlice\";\nimport { calculateQuoteAmount } from \"./pricingApi\";\n// Initially empty\nconst initialState = {};\nexport const pricingSlice = createSlice({\n  name: \"pricing\",\n  initialState,\n  reducers: {\n    updatePricing: (state, action) => {\n      const {\n        locator,\n        pricing\n      } = action.payload;\n\n      if (!state[locator]) {\n        state[locator] = [pricing];\n      } else {\n        const existingIndex = state[locator].findIndex(existingPricing => existingPricing.baseToken === pricing.baseToken && existingPricing.quoteToken === pricing.quoteToken);\n\n        if (existingIndex !== -1) {\n          state[locator][existingIndex] = pricing;\n        } else {\n          state[locator].push(pricing);\n        }\n      }\n    },\n    clearPricing: (state, action) => {\n      const {\n        locator,\n        pair\n      } = action.payload;\n      if (!state[locator]) return;\n      const i = state[locator].findIndex(existingPricing => existingPricing.baseToken === pair.baseToken && existingPricing.quoteToken === pair.quoteToken);\n      if (i === -1) return;\n      state[locator].splice(i, 1);\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(clearTradeTerms, () => initialState);\n  }\n});\nexport const {\n  updatePricing,\n  clearPricing\n} = pricingSlice.actions;\n\nconst selectPricing = state => state.pricing;\n\nexport const selectBestPricing = createSelector(selectTradeTerms, selectPricing, (terms, pricing) => {\n  let bestQuoteAmount = new BigNumber(0);\n  let bestPricing = null;\n  const {\n    quoteToken,\n    baseToken,\n    baseAmount: baseTokenAmount,\n    side\n  } = terms;\n  Object.keys(pricing).forEach(locator => {\n    const locatorPricing = pricing[locator];\n    const relevantIndex = locatorPricing.findIndex(p => p.quoteToken === quoteToken.address && p.baseToken === baseToken.address);\n    if (relevantIndex === -1) return;\n    const relevantPricing = locatorPricing[relevantIndex];\n\n    try {\n      const quoteAmount = new BigNumber(calculateQuoteAmount({\n        baseAmount: baseTokenAmount,\n        pricing: relevantPricing,\n        signerFee: \"7\",\n        side\n      }));\n\n      if (side === \"sell\" && quoteAmount.gt(bestQuoteAmount) || side === \"buy\" && quoteAmount.lt(bestQuoteAmount)) {\n        bestQuoteAmount = quoteAmount;\n        bestPricing = {\n          locator,\n          quoteAmount: quoteAmount.toString()\n        };\n      }\n    } catch (e) {\n      // calculateQuoteAmount will throw if the amount exceeds the maximum or\n      // is less than the minimum - we can ignore these makers for the purpose\n      // of this quote.\n      return;\n    }\n  });\n  return bestPricing;\n});\nexport default pricingSlice.reducer;","map":{"version":3,"sources":["/Users/marcusmattus/ethdex/airswap-web/src/features/pricing/pricingSlice.ts"],"names":["createSlice","createSelector","BigNumber","clearTradeTerms","selectTradeTerms","calculateQuoteAmount","initialState","pricingSlice","name","reducers","updatePricing","state","action","locator","pricing","payload","existingIndex","findIndex","existingPricing","baseToken","quoteToken","push","clearPricing","pair","i","splice","extraReducers","builder","addCase","actions","selectPricing","selectBestPricing","terms","bestQuoteAmount","bestPricing","baseAmount","baseTokenAmount","side","Object","keys","forEach","locatorPricing","relevantIndex","p","address","relevantPricing","quoteAmount","signerFee","gt","lt","toString","e","reducer"],"mappings":"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","sourcesContent":["import { Pricing } from \"@airswap/types\";\nimport { createSlice, PayloadAction, createSelector } from \"@reduxjs/toolkit\";\n\nimport BigNumber from \"bignumber.js\";\n\nimport { RootState } from \"../../app/store\";\nimport {\n  clearTradeTerms,\n  selectTradeTerms,\n} from \"../tradeTerms/tradeTermsSlice\";\nimport { calculateQuoteAmount } from \"./pricingApi\";\n\nexport interface PricingState {\n  [locator: string]: Pricing[];\n}\n\ntype Pair = {\n  baseToken: string;\n  quoteToken: string;\n};\n\n// Initially empty\nconst initialState: PricingState = {};\n\nexport const pricingSlice = createSlice({\n  name: \"pricing\",\n  initialState,\n  reducers: {\n    updatePricing: (\n      state,\n      action: PayloadAction<{ locator: string; pricing: Pricing }>\n    ) => {\n      const { locator, pricing } = action.payload;\n      if (!state[locator]) {\n        state[locator] = [pricing];\n      } else {\n        const existingIndex = state[locator].findIndex(\n          (existingPricing) =>\n            existingPricing.baseToken === pricing.baseToken &&\n            existingPricing.quoteToken === pricing.quoteToken\n        );\n        if (existingIndex !== -1) {\n          state[locator][existingIndex] = pricing;\n        } else {\n          state[locator].push(pricing);\n        }\n      }\n    },\n    clearPricing: (\n      state,\n      action: PayloadAction<{ locator: string; pair: Pair }>\n    ) => {\n      const { locator, pair } = action.payload;\n      if (!state[locator]) return;\n      const i = state[locator].findIndex(\n        (existingPricing) =>\n          existingPricing.baseToken === pair.baseToken &&\n          existingPricing.quoteToken === pair.quoteToken\n      );\n      if (i === -1) return;\n      state[locator].splice(i, 1);\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(clearTradeTerms, () => initialState);\n  },\n});\n\nexport const { updatePricing, clearPricing } = pricingSlice.actions;\n\nconst selectPricing = (state: RootState) => state.pricing;\n\nexport const selectBestPricing = createSelector(\n  selectTradeTerms,\n  selectPricing,\n  (terms, pricing) => {\n    let bestQuoteAmount = new BigNumber(0);\n    let bestPricing: {\n      locator: string;\n      quoteAmount: string;\n    } | null = null;\n\n    const { quoteToken, baseToken, baseAmount: baseTokenAmount, side } = terms;\n\n    Object.keys(pricing).forEach((locator) => {\n      const locatorPricing = pricing[locator];\n      const relevantIndex = locatorPricing.findIndex(\n        (p) =>\n          p.quoteToken === quoteToken.address &&\n          p.baseToken === baseToken.address\n      );\n\n      if (relevantIndex === -1) return;\n      const relevantPricing: Pricing = locatorPricing[relevantIndex];\n\n      try {\n        const quoteAmount = new BigNumber(\n          calculateQuoteAmount({\n            baseAmount: baseTokenAmount,\n            pricing: relevantPricing,\n            signerFee: \"7\",\n            side,\n          })\n        );\n        if (\n          (side === \"sell\" && quoteAmount.gt(bestQuoteAmount)) ||\n          (side === \"buy\" && quoteAmount.lt(bestQuoteAmount))\n        ) {\n          bestQuoteAmount = quoteAmount;\n          bestPricing = {\n            locator,\n            quoteAmount: quoteAmount.toString(),\n          };\n        }\n      } catch (e) {\n        // calculateQuoteAmount will throw if the amount exceeds the maximum or\n        // is less than the minimum - we can ignore these makers for the purpose\n        // of this quote.\n        return;\n      }\n    });\n\n    return bestPricing;\n  }\n);\n\nexport default pricingSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}