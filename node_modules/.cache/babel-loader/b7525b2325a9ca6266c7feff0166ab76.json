{"ast":null,"code":"var _jsxFileName = \"/Users/marcusmattus/ethdex/src/components/TransactionsTab/subcomponents/WalletTransaction/WalletTransaction.tsx\",\n    _s = $RefreshSig$();\n\nimport { useMemo } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { findTokenByAddress } from \"@airswap/metadata\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport BigNumber from \"bignumber.js\";\nimport findEthOrTokenByAddress from \"../../../../helpers/findEthOrTokenByAddress\";\nimport getTimeBetweenTwoDates from \"../../../../helpers/getTimeBetweenTwoDates\";\nimport ProgressBar from \"../../../ProgressBar/ProgressBar\";\nimport getWalletTransactionStatusText from \"../../helpers/getWalletTransactionStatusText\";\nimport { Container, RotatedIcon, SpanSubtitle, SpanTitle, StyledTransactionLink, TextContainer } from \"./WalletTransaction.styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst WalletTransaction = ({\n  transaction,\n  tokens,\n  chainId,\n  animate,\n  initial,\n  transition\n}) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const statusText = useMemo(() => {\n    return getWalletTransactionStatusText(transaction.status, t);\n  }, [transaction.status, t]);\n\n  if (transaction.type === \"Approval\") {\n    const tx = transaction;\n    const approvalToken = findTokenByAddress(tx.tokenAddress, tokens); //@ts-ignore\n\n    const timeBetween = getTimeBetweenTwoDates(new Date(tx.timestamp), t);\n    return /*#__PURE__*/_jsxDEV(Container, {\n      transition: transition,\n      animate: animate,\n      initial: initial,\n      children: [/*#__PURE__*/_jsxDEV(TextContainer, {\n        children: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(SpanTitle, {\n            children: t(\"wallet.approve\", {\n              symbol: approvalToken === null || approvalToken === void 0 ? void 0 : approvalToken.symbol\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(SpanSubtitle, {\n            children: [statusText, \" \\xB7 \", timeBetween]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), tx.hash && /*#__PURE__*/_jsxDEV(StyledTransactionLink, {\n        chainId: chainId,\n        hash: tx.hash\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this);\n  } else {\n    const tx = transaction;\n    const senderToken = findEthOrTokenByAddress(tx.order.senderToken, tokens, chainId);\n    const signerToken = findEthOrTokenByAddress(tx.order.signerToken, tokens, chainId);\n    const hasExpiry = !!tx.expiry; // For last look transactions, the user has sent the signer amount plus\n    // the fee:\n\n    let signerAmountWithFee = null;\n\n    if (tx.protocol === \"last-look\") {\n      signerAmountWithFee = new BigNumber(tx.order.signerAmount).multipliedBy(1.0007).integerValue(BigNumber.ROUND_FLOOR).toString();\n    } //@ts-ignore\n\n\n    const timeBetween = getTimeBetweenTwoDates(new Date(tx.timestamp), t);\n    return /*#__PURE__*/_jsxDEV(Container, {\n      transition: transition,\n      animate: animate,\n      initial: initial,\n      children: [tx.status === \"processing\" && /*#__PURE__*/_jsxDEV(RotatedIcon, {\n        name: \"swap\",\n        iconSize: 1.25\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TextContainer, {\n        children: tx && senderToken && signerToken && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(SpanTitle, {\n            hasProgress: hasExpiry && tx.status === \"processing\",\n            children: t(tx.protocol === \"last-look\" ? \"wallet.lastLookTransaction\" : \"wallet.transaction\", {\n              senderAmount: parseFloat(Number(formatUnits(tx.order.senderAmount, senderToken.decimals)).toFixed(5)),\n              senderToken: senderToken.symbol,\n              signerAmount: parseFloat(Number(formatUnits(signerAmountWithFee || tx.order.signerAmount, signerToken.decimals)).toFixed(5)),\n              signerToken: signerToken.symbol\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 15\n          }, this), hasExpiry && tx.status === \"processing\" ? /*#__PURE__*/_jsxDEV(ProgressBar, {\n            startTime: tx.timestamp,\n            endTime: parseInt(tx.expiry) * 1000\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(SpanSubtitle, {\n            children: [statusText, \" \\xB7 \", timeBetween]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), tx.status !== \"processing\" && (tx.hash ? /*#__PURE__*/_jsxDEV(StyledTransactionLink, {\n        chainId: chainId,\n        hash: tx.hash\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_s(WalletTransaction, \"i7NZDj6LvA+l+ZGPruiGIiESME4=\", false, function () {\n  return [useTranslation];\n});\n\n_c = WalletTransaction;\nexport default WalletTransaction;\n\nvar _c;\n\n$RefreshReg$(_c, \"WalletTransaction\");","map":{"version":3,"sources":["/Users/marcusmattus/ethdex/src/components/TransactionsTab/subcomponents/WalletTransaction/WalletTransaction.tsx"],"names":["useMemo","useTranslation","findTokenByAddress","formatUnits","BigNumber","findEthOrTokenByAddress","getTimeBetweenTwoDates","ProgressBar","getWalletTransactionStatusText","Container","RotatedIcon","SpanSubtitle","SpanTitle","StyledTransactionLink","TextContainer","WalletTransaction","transaction","tokens","chainId","animate","initial","transition","t","statusText","status","type","tx","approvalToken","tokenAddress","timeBetween","Date","timestamp","symbol","hash","senderToken","order","signerToken","hasExpiry","expiry","signerAmountWithFee","protocol","signerAmount","multipliedBy","integerValue","ROUND_FLOOR","toString","senderAmount","parseFloat","Number","decimals","toFixed","parseInt"],"mappings":"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","sourcesContent":["import { useMemo } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { findTokenByAddress } from \"@airswap/metadata\";\nimport { TokenInfo } from \"@airswap/types\";\nimport { formatUnits } from \"@ethersproject/units\";\n\nimport BigNumber from \"bignumber.js\";\nimport { HTMLMotionProps } from \"framer-motion\";\n\nimport {\n  SubmittedApproval,\n  SubmittedTransactionWithOrder,\n  SubmittedTransaction,\n} from \"../../../../features/transactions/transactionsSlice\";\nimport findEthOrTokenByAddress from \"../../../../helpers/findEthOrTokenByAddress\";\nimport getTimeBetweenTwoDates from \"../../../../helpers/getTimeBetweenTwoDates\";\nimport ProgressBar from \"../../../ProgressBar/ProgressBar\";\nimport getWalletTransactionStatusText from \"../../helpers/getWalletTransactionStatusText\";\nimport {\n  Container,\n  RotatedIcon,\n  SpanSubtitle,\n  SpanTitle,\n  StyledTransactionLink,\n  TextContainer,\n} from \"./WalletTransaction.styles\";\n\ninterface WalletTransactionProps extends HTMLMotionProps<\"div\"> {\n  /**\n   * The parent object of SubmittedOrder and SubmittedApproval\n   */\n  transaction: SubmittedTransaction;\n  /**\n   * All token metadata\n   */\n  tokens: TokenInfo[];\n  /**\n   * chainId of current Ethereum net\n   */\n  chainId: number;\n}\n\nconst WalletTransaction = ({\n  transaction,\n  tokens,\n  chainId,\n  animate,\n  initial,\n  transition,\n}: WalletTransactionProps) => {\n  const { t } = useTranslation();\n\n  const statusText = useMemo(() => {\n    return getWalletTransactionStatusText(transaction.status, t);\n  }, [transaction.status, t]);\n\n  if (transaction.type === \"Approval\") {\n    const tx: SubmittedApproval = transaction as SubmittedApproval;\n    const approvalToken = findTokenByAddress(tx.tokenAddress, tokens);\n    //@ts-ignore\n    const timeBetween = getTimeBetweenTwoDates(new Date(tx.timestamp), t);\n    return (\n      <Container transition={transition} animate={animate} initial={initial}>\n        <TextContainer>\n          <>\n            <SpanTitle>\n              {t(\"wallet.approve\", { symbol: approvalToken?.symbol })}\n            </SpanTitle>\n            <SpanSubtitle>\n              {statusText} · {timeBetween}\n            </SpanSubtitle>\n          </>\n        </TextContainer>\n        {tx.hash && <StyledTransactionLink chainId={chainId} hash={tx.hash} />}\n      </Container>\n    );\n  } else {\n    const tx: SubmittedTransactionWithOrder = transaction as SubmittedTransactionWithOrder;\n    const senderToken = findEthOrTokenByAddress(\n      tx.order.senderToken,\n      tokens,\n      chainId\n    );\n    const signerToken = findEthOrTokenByAddress(\n      tx.order.signerToken,\n      tokens,\n      chainId\n    );\n    const hasExpiry = !!tx.expiry;\n\n    // For last look transactions, the user has sent the signer amount plus\n    // the fee:\n    let signerAmountWithFee: string | null = null;\n    if (tx.protocol === \"last-look\") {\n      signerAmountWithFee = new BigNumber(tx.order.signerAmount)\n        .multipliedBy(1.0007)\n        .integerValue(BigNumber.ROUND_FLOOR)\n        .toString();\n    }\n    //@ts-ignore\n    const timeBetween = getTimeBetweenTwoDates(new Date(tx.timestamp), t);\n\n    return (\n      <Container transition={transition} animate={animate} initial={initial}>\n        {tx.status === \"processing\" && (\n          <RotatedIcon name=\"swap\" iconSize={1.25} />\n        )}\n        <TextContainer>\n          {tx && senderToken && signerToken && (\n            <>\n              <SpanTitle hasProgress={hasExpiry && tx.status === \"processing\"}>\n                {t(\n                  tx.protocol === \"last-look\"\n                    ? \"wallet.lastLookTransaction\"\n                    : \"wallet.transaction\",\n                  {\n                    senderAmount: parseFloat(\n                      Number(\n                        formatUnits(tx.order.senderAmount, senderToken.decimals)\n                      ).toFixed(5)\n                    ),\n                    senderToken: senderToken.symbol,\n                    signerAmount: parseFloat(\n                      Number(\n                        formatUnits(\n                          signerAmountWithFee || tx.order.signerAmount,\n                          signerToken.decimals\n                        )\n                      ).toFixed(5)\n                    ),\n                    signerToken: signerToken.symbol,\n                  }\n                )}\n              </SpanTitle>\n              {hasExpiry && tx.status === \"processing\" ? (\n                <ProgressBar\n                  startTime={tx.timestamp}\n                  endTime={parseInt(tx.expiry!) * 1000}\n                />\n              ) : (\n                <SpanSubtitle>\n                  {statusText} · {timeBetween}\n                </SpanSubtitle>\n              )}\n            </>\n          )}\n        </TextContainer>\n        {tx.status !== \"processing\" &&\n          (tx.hash ? (\n            <StyledTransactionLink chainId={chainId} hash={tx.hash} />\n          ) : (\n            <span />\n          ))}\n      </Container>\n    );\n  }\n};\n\nexport default WalletTransaction;\n"]},"metadata":{},"sourceType":"module"}