{"ast":null,"code":"import { AbstractConnector } from \"@web3-react/abstract-connector\";\nimport { InjectedConnector } from \"@web3-react/injected-connector\";\nimport { WalletConnectConnector } from \"@web3-react/walletconnect-connector\";\nimport metamaskLogo from \"../assets/wallet-provider-logos/metamask.svg\";\nimport walletconnectLogo from \"../assets/wallet-provider-logos/walletconnect.svg\";\nconst cachedConnectors = {};\nconst SUPPORTED_WALLET_PROVIDERS = [{\n  name: \"MetaMask\",\n  logo: metamaskLogo,\n  isInstalled: typeof window.ethereum !== \"undefined\",\n  url: \"https://metamask.io/\",\n  getConnector: () => {\n    if (!cachedConnectors.MetaMask) {\n      cachedConnectors.MetaMask = new InjectedConnector({\n        supportedChainIds: [1, // Mainnet\n        4 // Rinkeby\n        ]\n      });\n    }\n\n    return cachedConnectors.MetaMask;\n  }\n}, {\n  name: \"WalletConnect\",\n  logo: walletconnectLogo,\n  isInstalled: true,\n  url: \"https://walletconnect.com/\",\n  getConnector: () => {\n    if (!cachedConnectors.WalletConnect) {\n      cachedConnectors.WalletConnect = new WalletConnectConnector({\n        rpc: {\n          1: process.env.REACT_APP_RPC_URL_1 || \"\",\n          4: process.env.REACT_APP_RPC_URL_4 || \"\"\n        }\n      });\n    }\n\n    return cachedConnectors.WalletConnect;\n  }\n}];\nexport default SUPPORTED_WALLET_PROVIDERS;\nexport { AbstractConnector };","map":{"version":3,"sources":["/Users/marcusmattus/ethdex/airswap-web/src/constants/supportedWalletProviders.ts"],"names":["AbstractConnector","InjectedConnector","WalletConnectConnector","cachedConnectors","SUPPORTED_WALLET_PROVIDERS","name","logo","metamaskLogo","isInstalled","window","ethereum","url","getConnector","MetaMask","supportedChainIds","walletconnectLogo","WalletConnect","rpc","process","env","REACT_APP_RPC_URL_1","REACT_APP_RPC_URL_4"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,gCAAlC;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,SAASC,sBAAT,QAAuC,qCAAvC;;;AAeA,MAAMC,gBAAmD,GAAG,EAA5D;AAEA,MAAMC,0BAA4C,GAAG,CACnD;AACEC,EAAAA,IAAI,EAAE,UADR;AAEEC,EAAAA,IAAI,EAAEC,YAFR;AAGEC,EAAAA,WAAW,EAAE,OAAOC,MAAM,CAACC,QAAd,KAA2B,WAH1C;AAIEC,EAAAA,GAAG,EAAE,sBAJP;AAKEC,EAAAA,YAAY,EAAE,MAAM;AAClB,QAAI,CAACT,gBAAgB,CAACU,QAAtB,EAAgC;AAC9BV,MAAAA,gBAAgB,CAACU,QAAjB,GAA4B,IAAIZ,iBAAJ,CAAsB;AAChDa,QAAAA,iBAAiB,EAAE,CACjB,CADiB,EACd;AACH,SAFiB,CAEd;AAFc;AAD6B,OAAtB,CAA5B;AAMD;;AACD,WAAOX,gBAAgB,CAACU,QAAxB;AACD;AAfH,CADmD,EAkBnD;AACER,EAAAA,IAAI,EAAE,eADR;AAEEC,EAAAA,IAAI,EAAES,iBAFR;AAGEP,EAAAA,WAAW,EAAE,IAHf;AAIEG,EAAAA,GAAG,EAAE,4BAJP;AAKEC,EAAAA,YAAY,EAAE,MAAM;AAClB,QAAI,CAACT,gBAAgB,CAACa,aAAtB,EAAqC;AACnCb,MAAAA,gBAAgB,CAACa,aAAjB,GAAiC,IAAId,sBAAJ,CAA2B;AAC1De,QAAAA,GAAG,EAAE;AACH,aAAGC,OAAO,CAACC,GAAR,CAAYC,mBAAZ,IAAmC,EADnC;AAEH,aAAGF,OAAO,CAACC,GAAR,CAAYE,mBAAZ,IAAmC;AAFnC;AADqD,OAA3B,CAAjC;AAMD;;AACD,WAAOlB,gBAAgB,CAACa,aAAxB;AACD;AAfH,CAlBmD,CAArD;AAqCA,eAAeZ,0BAAf;AAEA,SAASJ,iBAAT","sourcesContent":["import { AbstractConnector } from \"@web3-react/abstract-connector\";\nimport { InjectedConnector } from \"@web3-react/injected-connector\";\nimport { WalletConnectConnector } from \"@web3-react/walletconnect-connector\";\n\nimport metamaskLogo from \"../assets/wallet-provider-logos/metamask.svg\";\nimport walletconnectLogo from \"../assets/wallet-provider-logos/walletconnect.svg\";\n\ndeclare let window: any;\n\nexport type WalletProvider = {\n  name: string;\n  logo: string;\n  isInstalled: boolean;\n  url: string;\n  getConnector: () => AbstractConnector;\n};\n\nconst cachedConnectors: Record<string, AbstractConnector> = {};\n\nconst SUPPORTED_WALLET_PROVIDERS: WalletProvider[] = [\n  {\n    name: \"MetaMask\",\n    logo: metamaskLogo,\n    isInstalled: typeof window.ethereum !== \"undefined\",\n    url: \"https://metamask.io/\",\n    getConnector: () => {\n      if (!cachedConnectors.MetaMask) {\n        cachedConnectors.MetaMask = new InjectedConnector({\n          supportedChainIds: [\n            1, // Mainnet\n            4, // Rinkeby\n          ],\n        });\n      }\n      return cachedConnectors.MetaMask;\n    },\n  },\n  {\n    name: \"WalletConnect\",\n    logo: walletconnectLogo,\n    isInstalled: true,\n    url: \"https://walletconnect.com/\",\n    getConnector: () => {\n      if (!cachedConnectors.WalletConnect) {\n        cachedConnectors.WalletConnect = new WalletConnectConnector({\n          rpc: {\n            1: process.env.REACT_APP_RPC_URL_1 || \"\",\n            4: process.env.REACT_APP_RPC_URL_4 || \"\",\n          },\n        });\n      }\n      return cachedConnectors.WalletConnect;\n    },\n  },\n];\n\nexport default SUPPORTED_WALLET_PROVIDERS;\n\nexport { AbstractConnector };\n"]},"metadata":{},"sourceType":"module"}