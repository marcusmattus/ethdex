{"ast":null,"code":"import SUPPORTED_WALLET_PROVIDERS from \"../../constants/supportedWalletProviders\";\nconst LAST_ACCOUNT_LOCAL_STORAGE_KEY = `airswap/lastConnectedAccount`;\n\nconst saveLastAccount = (address, provider) => {\n  localStorage.setItem(LAST_ACCOUNT_LOCAL_STORAGE_KEY, `${provider.name}/${address}`);\n};\n\nconst clearLastAccount = () => {\n  localStorage.setItem(LAST_ACCOUNT_LOCAL_STORAGE_KEY, \"\");\n};\n\nconst loadLastAccount = () => {\n  try {\n    const storedString = localStorage.getItem(LAST_ACCOUNT_LOCAL_STORAGE_KEY);\n    if (!storedString) throw new Error(\"No connected accounts saved\");\n    const [providerName, address] = storedString.split(\"/\");\n    const provider = SUPPORTED_WALLET_PROVIDERS.find(p => p.name === providerName);\n    if (!provider) throw new Error(`Could not find provider: ${providerName}`);\n    return {\n      provider,\n      address\n    };\n  } catch (e) {\n    return null;\n  }\n};\n\nexport { loadLastAccount, saveLastAccount, clearLastAccount };","map":{"version":3,"sources":["/Users/marcusmattus/ethdex/airswap-web/src/features/wallet/walletApi.ts"],"names":["SUPPORTED_WALLET_PROVIDERS","LAST_ACCOUNT_LOCAL_STORAGE_KEY","saveLastAccount","address","provider","localStorage","setItem","name","clearLastAccount","loadLastAccount","storedString","getItem","Error","providerName","split","find","p","e"],"mappings":"AAAA,OAAOA,0BAAP,MAEO,0CAFP;AAIA,MAAMC,8BAA8B,GAAI,8BAAxC;;AAEA,MAAMC,eAAe,GAAG,CAACC,OAAD,EAAkBC,QAAlB,KAA+C;AACrEC,EAAAA,YAAY,CAACC,OAAb,CACEL,8BADF,EAEG,GAAEG,QAAQ,CAACG,IAAK,IAAGJ,OAAQ,EAF9B;AAID,CALD;;AAOA,MAAMK,gBAAgB,GAAG,MAAM;AAC7BH,EAAAA,YAAY,CAACC,OAAb,CAAqBL,8BAArB,EAAqD,EAArD;AACD,CAFD;;AAIA,MAAMQ,eAAe,GAAG,MAAM;AAC5B,MAAI;AACF,UAAMC,YAAY,GAAGL,YAAY,CAACM,OAAb,CAAqBV,8BAArB,CAArB;AACA,QAAI,CAACS,YAAL,EAAmB,MAAM,IAAIE,KAAJ,CAAU,6BAAV,CAAN;AACnB,UAAM,CAACC,YAAD,EAAeV,OAAf,IAA0BO,YAAY,CAACI,KAAb,CAAmB,GAAnB,CAAhC;AACA,UAAMV,QAAQ,GAAGJ,0BAA0B,CAACe,IAA3B,CACdC,CAAD,IAAOA,CAAC,CAACT,IAAF,KAAWM,YADH,CAAjB;AAGA,QAAI,CAACT,QAAL,EAAe,MAAM,IAAIQ,KAAJ,CAAW,4BAA2BC,YAAa,EAAnD,CAAN;AACf,WAAO;AACLT,MAAAA,QADK;AAELD,MAAAA;AAFK,KAAP;AAID,GAZD,CAYE,OAAOc,CAAP,EAAU;AACV,WAAO,IAAP;AACD;AACF,CAhBD;;AAkBA,SAASR,eAAT,EAA0BP,eAA1B,EAA2CM,gBAA3C","sourcesContent":["import SUPPORTED_WALLET_PROVIDERS, {\n  WalletProvider,\n} from \"../../constants/supportedWalletProviders\";\n\nconst LAST_ACCOUNT_LOCAL_STORAGE_KEY = `airswap/lastConnectedAccount`;\n\nconst saveLastAccount = (address: string, provider: WalletProvider) => {\n  localStorage.setItem(\n    LAST_ACCOUNT_LOCAL_STORAGE_KEY,\n    `${provider.name}/${address}`\n  );\n};\n\nconst clearLastAccount = () => {\n  localStorage.setItem(LAST_ACCOUNT_LOCAL_STORAGE_KEY, \"\");\n};\n\nconst loadLastAccount = () => {\n  try {\n    const storedString = localStorage.getItem(LAST_ACCOUNT_LOCAL_STORAGE_KEY);\n    if (!storedString) throw new Error(\"No connected accounts saved\");\n    const [providerName, address] = storedString.split(\"/\");\n    const provider = SUPPORTED_WALLET_PROVIDERS.find(\n      (p) => p.name === providerName\n    );\n    if (!provider) throw new Error(`Could not find provider: ${providerName}`);\n    return {\n      provider,\n      address,\n    };\n  } catch (e) {\n    return null;\n  }\n};\n\nexport { loadLastAccount, saveLastAccount, clearLastAccount };\n"]},"metadata":{},"sourceType":"module"}