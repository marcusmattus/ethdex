{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useMemo, useRef } from \"react\";\nimport { useAppDispatch } from \"../app/hooks\";\nimport { REFERENCE_PRICE_UPDATE_INTERVAL_MS } from \"../constants/configParams\";\nimport { getFastGasPrice, getPriceOfTokenInWethFromUniswap } from \"../features/gasCost/gasCostApi\";\nimport { setFastGasPrice, setTokenPrice } from \"../features/gasCost/gasCostSlice\";\n\nconst useGasPriceSubscriber = () => {\n  _s();\n\n  const dispatch = useAppDispatch();\n  const intervals = useRef({\n    gas: null,\n    tokens: {}\n  });\n  const subscribeToGasPrice = useMemo(() => () => {\n    if (intervals.current.gas) return;\n\n    const updateGasPrice = async () => {\n      try {\n        let price = await getFastGasPrice();\n\n        if (price) {\n          dispatch(setFastGasPrice(price.toString()));\n        }\n      } catch (e) {\n        console.error(e);\n      }\n    };\n\n    intervals.current.gas = window.setInterval(updateGasPrice, REFERENCE_PRICE_UPDATE_INTERVAL_MS); // also call immediately.\n\n    updateGasPrice();\n  }, [dispatch]);\n  const unsubscribeFromGasPrice = useMemo(() => () => {\n    const interval = intervals.current.gas;\n    if (interval === null) return;\n    clearInterval(interval);\n    intervals.current.gas = null;\n  }, []);\n  const subscribeToTokenPrice = useMemo(() => (token, provider, chainId) => {\n    if (intervals.current.tokens[token.address]) return;\n\n    const updateTokenPrice = async () => {\n      const price = await getPriceOfTokenInWethFromUniswap(token, provider, chainId);\n      dispatch(setTokenPrice({\n        tokenAddress: token.address,\n        tokenPriceInWeth: price.toString()\n      }));\n    };\n\n    intervals.current.tokens[token.address] = window.setInterval(updateTokenPrice, REFERENCE_PRICE_UPDATE_INTERVAL_MS);\n    updateTokenPrice();\n  }, [dispatch]);\n  const unsubscribeFromTokenPrice = useMemo(() => token => {\n    if (token) {\n      const interval = intervals.current.tokens[token.address];\n      if (!interval) return;\n      window.clearInterval(intervals.current.tokens[token.address]);\n      delete intervals.current.tokens[token.address];\n    } else {\n      // Clear all if no token provided\n      Object.keys(intervals.current.tokens).forEach(tokenAddress => {\n        window.clearInterval(intervals.current.tokens[tokenAddress]);\n      });\n      intervals.current.tokens = {};\n    }\n  }, []);\n  return {\n    subscribeToGasPrice,\n    unsubscribeFromGasPrice,\n    subscribeToTokenPrice,\n    unsubscribeFromTokenPrice\n  };\n};\n\n_s(useGasPriceSubscriber, \"nB7GZFpwYsFRodlBw882vk0e6gw=\", false, function () {\n  return [useAppDispatch];\n});\n\nexport default useGasPriceSubscriber;","map":{"version":3,"sources":["/Users/marcusmattus/ethdex/src/hooks/useReferencePriceSubscriber.ts"],"names":["useMemo","useRef","useAppDispatch","REFERENCE_PRICE_UPDATE_INTERVAL_MS","getFastGasPrice","getPriceOfTokenInWethFromUniswap","setFastGasPrice","setTokenPrice","useGasPriceSubscriber","dispatch","intervals","gas","tokens","subscribeToGasPrice","current","updateGasPrice","price","toString","e","console","error","window","setInterval","unsubscribeFromGasPrice","interval","clearInterval","subscribeToTokenPrice","token","provider","chainId","address","updateTokenPrice","tokenAddress","tokenPriceInWeth","unsubscribeFromTokenPrice","Object","keys","forEach"],"mappings":"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","sourcesContent":["import { useMemo, useRef } from \"react\";\n\nimport { TokenInfo } from \"@airswap/types\";\n\nimport { providers } from \"ethers\";\n\nimport { useAppDispatch } from \"../app/hooks\";\nimport { REFERENCE_PRICE_UPDATE_INTERVAL_MS } from \"../constants/configParams\";\nimport {\n  getFastGasPrice,\n  getPriceOfTokenInWethFromUniswap,\n} from \"../features/gasCost/gasCostApi\";\nimport {\n  setFastGasPrice,\n  setTokenPrice,\n} from \"../features/gasCost/gasCostSlice\";\n\nconst useGasPriceSubscriber = () => {\n  const dispatch = useAppDispatch();\n\n  const intervals = useRef<{\n    gas: number | null;\n    tokens: Record<string, number>;\n  }>({ gas: null, tokens: {} });\n\n  const subscribeToGasPrice = useMemo(\n    () => () => {\n      if (intervals.current.gas) return;\n      const updateGasPrice = async () => {\n        try {\n          let price = await getFastGasPrice();\n          if (price) {\n            dispatch(setFastGasPrice(price.toString()));\n          }\n        } catch (e) {\n          console.error(e);\n        }\n      };\n      intervals.current.gas = window.setInterval(\n        updateGasPrice,\n        REFERENCE_PRICE_UPDATE_INTERVAL_MS\n      );\n      // also call immediately.\n      updateGasPrice();\n    },\n    [dispatch]\n  );\n\n  const unsubscribeFromGasPrice = useMemo(\n    () => () => {\n      const interval = intervals.current.gas;\n      if (interval === null) return;\n      clearInterval(interval);\n      intervals.current.gas = null;\n    },\n    []\n  );\n\n  const subscribeToTokenPrice = useMemo(\n    () => (token: TokenInfo, provider: providers.Provider, chainId: number) => {\n      if (intervals.current.tokens[token.address]) return;\n      const updateTokenPrice = async () => {\n        const price = await getPriceOfTokenInWethFromUniswap(\n          token,\n          provider,\n          chainId\n        );\n        dispatch(\n          setTokenPrice({\n            tokenAddress: token.address,\n            tokenPriceInWeth: price.toString(),\n          })\n        );\n      };\n      intervals.current.tokens[token.address] = window.setInterval(\n        updateTokenPrice,\n        REFERENCE_PRICE_UPDATE_INTERVAL_MS\n      );\n      updateTokenPrice();\n    },\n    [dispatch]\n  );\n\n  const unsubscribeFromTokenPrice = useMemo(\n    () => (token?: TokenInfo) => {\n      if (token) {\n        const interval = intervals.current.tokens[token.address];\n        if (!interval) return;\n        window.clearInterval(intervals.current.tokens[token.address]);\n        delete intervals.current.tokens[token.address];\n      } else {\n        // Clear all if no token provided\n        Object.keys(intervals.current.tokens).forEach((tokenAddress) => {\n          window.clearInterval(intervals.current.tokens[tokenAddress]);\n        });\n        intervals.current.tokens = {};\n      }\n    },\n    []\n  );\n\n  return {\n    subscribeToGasPrice,\n    unsubscribeFromGasPrice,\n    subscribeToTokenPrice,\n    unsubscribeFromTokenPrice,\n  };\n};\n\nexport default useGasPriceSubscriber;\n"]},"metadata":{},"sourceType":"module"}