{"ast":null,"code":"var _jsxFileName = \"/Users/marcusmattus/ethdex/airswap-web/src/components/Button/Button.tsx\";\nimport React from \"react\";\nimport LoadingSpinner from \"../LoadingSpinner/LoadingSpinner\";\nimport { StyledButton, Text } from \"./Button.styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Button = /*#__PURE__*/React.forwardRef(_c = ({\n  children,\n  className = \"\",\n  intent = \"neutral\",\n  justifyContent = \"center\",\n  disabled = false,\n  loading = false,\n  onClick,\n  ...rest\n}, ref) => {\n  return /*#__PURE__*/_jsxDEV(StyledButton, {\n    className: className,\n    $loading: loading,\n    intent: intent,\n    disabled: disabled || loading,\n    justifyContent: justifyContent,\n    onClick: e => {\n      !loading && onClick && onClick(e);\n    },\n    ref: ref,\n    ...rest,\n    children: [/*#__PURE__*/_jsxDEV(Text, {\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this), loading && /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 7\n  }, this);\n});\n_c2 = Button;\nexport default Button;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Button$React.forwardRef\");\n$RefreshReg$(_c2, \"Button\");","map":{"version":3,"sources":["/Users/marcusmattus/ethdex/airswap-web/src/components/Button/Button.tsx"],"names":["React","LoadingSpinner","StyledButton","Text","Button","forwardRef","children","className","intent","justifyContent","disabled","loading","onClick","rest","ref","e"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,SAASC,YAAT,EAAuBC,IAAvB,QAAmC,iBAAnC;;AA4BA,OAAO,MAAMC,MAAM,gBAAGJ,KAAK,CAACK,UAAN,MACpB,CACE;AACEC,EAAAA,QADF;AAEEC,EAAAA,SAAS,GAAG,EAFd;AAGEC,EAAAA,MAAM,GAAG,SAHX;AAIEC,EAAAA,cAAc,GAAG,QAJnB;AAKEC,EAAAA,QAAQ,GAAG,KALb;AAMEC,EAAAA,OAAO,GAAG,KANZ;AAOEC,EAAAA,OAPF;AAQE,KAAGC;AARL,CADF,EAWEC,GAXF,KAYK;AACH,sBACE,QAAC,YAAD;AACE,IAAA,SAAS,EAAEP,SADb;AAEE,IAAA,QAAQ,EAAEI,OAFZ;AAGE,IAAA,MAAM,EAAEH,MAHV;AAIE,IAAA,QAAQ,EAAEE,QAAQ,IAAIC,OAJxB;AAKE,IAAA,cAAc,EAAEF,cALlB;AAME,IAAA,OAAO,EAAGM,CAAD,IAAO;AACd,OAACJ,OAAD,IAAYC,OAAZ,IAAuBA,OAAO,CAACG,CAAD,CAA9B;AACD,KARH;AASE,IAAA,GAAG,EAAED,GATP;AAAA,OAUMD,IAVN;AAAA,4BAYE,QAAC,IAAD;AAAA,gBAAOP;AAAP;AAAA;AAAA;AAAA;AAAA,YAZF,EAaGK,OAAO,iBAAI,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,YAbd;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD,CA/BmB,CAAf;MAAMP,M;AAkCb,eAAeA,MAAf","sourcesContent":["import React from \"react\";\n\nimport LoadingSpinner from \"../LoadingSpinner/LoadingSpinner\";\nimport { StyledButton, Text } from \"./Button.styles\";\n\nexport type ButtonIntent = \"neutral\" | \"primary\" | \"positive\" | \"destructive\";\nexport type ButtonJustifyContent = \"center\" | \"flex-start\" | \"flex-end\";\n\nexport type ButtonProps = {\n  children: React.ReactNode;\n  className?: string;\n  /**\n   * Intent affects the appearance of the button\n   */\n  intent?: ButtonIntent;\n  /**\n   * Intent affects the appearance of the button\n   */\n  justifyContent?: ButtonJustifyContent;\n  /**\n   * Whether or not the button should be disabled. Clicking a disabled button\n   * has no effect.\n   */\n  disabled?: boolean;\n  /**\n   * Whether or not to show a loading spinner within the button. This also\n   * prevents further clicks on the button\n   */\n  loading?: boolean;\n} & React.ButtonHTMLAttributes<HTMLButtonElement>;\n\nexport const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      children,\n      className = \"\",\n      intent = \"neutral\",\n      justifyContent = \"center\",\n      disabled = false,\n      loading = false,\n      onClick,\n      ...rest\n    },\n    ref\n  ) => {\n    return (\n      <StyledButton\n        className={className}\n        $loading={loading}\n        intent={intent}\n        disabled={disabled || loading}\n        justifyContent={justifyContent}\n        onClick={(e) => {\n          !loading && onClick && onClick(e);\n        }}\n        ref={ref}\n        {...rest}\n      >\n        <Text>{children}</Text>\n        {loading && <LoadingSpinner />}\n      </StyledButton>\n    );\n  }\n);\n\nexport default Button;\n"]},"metadata":{},"sourceType":"module"}