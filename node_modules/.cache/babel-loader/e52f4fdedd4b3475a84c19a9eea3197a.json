{"ast":null,"code":"'use strict';\n\nconst https = require('https');\n\nconst ClientHttp = require('./http');\n/**\n *  Constructor for a Jayson HTTPS Client\n *  @class ClientHttps\n *  @constructor\n *  @extends ClientHttp\n *  @param {Object|String} [options] String interpreted as a URL\n *  @param {String} [options.encoding=\"utf8\"] Encoding to use\n *  @return {ClientHttps}\n */\n\n\nconst ClientHttps = function (options) {\n  if (!(this instanceof ClientHttps)) {\n    return new ClientHttps(options);\n  } // just proxy to constructor for ClientHttp\n\n\n  ClientHttp.call(this, options);\n};\n\nrequire('util').inherits(ClientHttps, ClientHttp);\n\nmodule.exports = ClientHttps;\n/**\n *  Gets a stream interface to a https server\n *  @param {Object} options An options object\n *  @return {require('https').ClientRequest}\n *  @private\n */\n\nClientHttps.prototype._getRequestStream = function (options) {\n  return https.request(options || {});\n};","map":{"version":3,"sources":["/Users/marcusmattus/ethdex/airswap-web/node_modules/jayson/lib/client/https.js"],"names":["https","require","ClientHttp","ClientHttps","options","call","inherits","module","exports","prototype","_getRequestStream","request"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,QAAD,CAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAME,WAAW,GAAG,UAASC,OAAT,EAAkB;AACpC,MAAG,EAAE,gBAAgBD,WAAlB,CAAH,EAAmC;AACjC,WAAO,IAAIA,WAAJ,CAAgBC,OAAhB,CAAP;AACD,GAHmC,CAIpC;;;AACAF,EAAAA,UAAU,CAACG,IAAX,CAAgB,IAAhB,EAAsBD,OAAtB;AACD,CAND;;AAOAH,OAAO,CAAC,MAAD,CAAP,CAAgBK,QAAhB,CAAyBH,WAAzB,EAAsCD,UAAtC;;AAEAK,MAAM,CAACC,OAAP,GAAiBL,WAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACAA,WAAW,CAACM,SAAZ,CAAsBC,iBAAtB,GAA0C,UAASN,OAAT,EAAkB;AAC1D,SAAOJ,KAAK,CAACW,OAAN,CAAcP,OAAO,IAAI,EAAzB,CAAP;AACD,CAFD","sourcesContent":["'use strict';\n\nconst https = require('https');\nconst ClientHttp = require('./http');\n\n/**\n *  Constructor for a Jayson HTTPS Client\n *  @class ClientHttps\n *  @constructor\n *  @extends ClientHttp\n *  @param {Object|String} [options] String interpreted as a URL\n *  @param {String} [options.encoding=\"utf8\"] Encoding to use\n *  @return {ClientHttps}\n */\nconst ClientHttps = function(options) {\n  if(!(this instanceof ClientHttps)) {\n    return new ClientHttps(options);\n  }\n  // just proxy to constructor for ClientHttp\n  ClientHttp.call(this, options);\n};\nrequire('util').inherits(ClientHttps, ClientHttp);\n\nmodule.exports = ClientHttps;\n\n/**\n *  Gets a stream interface to a https server\n *  @param {Object} options An options object\n *  @return {require('https').ClientRequest}\n *  @private\n */\nClientHttps.prototype._getRequestStream = function(options) {\n  return https.request(options || {});\n};\n"]},"metadata":{},"sourceType":"script"}