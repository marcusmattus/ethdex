{"ast":null,"code":"import { DefaultTheme as _DefaultTheme } from \"styled-components\";\nimport _styled from \"styled-components\";\nimport { css } from \"styled-components\";\n\nfunction getButtonBackground(theme, intent) {\n  switch (intent) {\n    case \"destructive\":\n      return theme.colors.red;\n\n    case \"positive\":\n      return theme.colors.green;\n\n    case \"neutral\":\n      return theme.colors.black;\n\n    default:\n      return theme.colors.primary;\n  }\n}\n\nfunction getButtonHoverBackground(theme, intent) {\n  switch (intent) {\n    case \"destructive\":\n      return theme.colors.red;\n\n    case \"positive\":\n      return theme.colors.green;\n\n    case \"neutral\":\n      return theme.colors.black;\n\n    default:\n      return theme.colors.primaryDark;\n  }\n}\n\nfunction getButtonBorderColor(theme, intent) {\n  if (intent === \"neutral\") {\n    return theme.name === \"dark\" ? theme.colors.lightGrey : theme.colors.borderGrey;\n  }\n\n  return theme.colors.borderGrey;\n}\n\nfunction getButtonHoverBorderColor(theme, intent) {\n  if (intent === \"neutral\") {\n    return theme.colors.lightGrey;\n  }\n\n  return theme.colors.primaryDark;\n}\n\nexport const Text = _styled.div.withConfig({\n  displayName: \"Buttonstyles__Text\",\n  componentId: \"sc-8ursji-0\"\n})([\"transition:opacity 0.3s ease-out;\"]);\nexport const ButtonStyle = css([\"display:flex;align-items:center;justify-content:\", \";width:100%;height:3rem;padding:0 1rem;font-size:0.9375rem;font-weight:600;text-transform:uppercase;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;border-radius:2px;border-style:\\\"solid\\\";border-width:1px;border-color:\", \";color:\", \";background:\", \";pointer-events:\", \";cursor:\", \";\", \"{margin-right:\", \";opacity:\", \";}&:focus,&:hover{outline:0;background:\", \";border-color:\", \";}&:active{border-color:\", \";}\"], props => props.justifyContent || \"center\", props => getButtonBorderColor(props.theme, props.intent), props => props.intent === \"neutral\" && props.theme.name === \"light\" ? props.theme.colors.primary : props.theme.colors.alwaysWhite, props => getButtonBackground(props.theme, props.intent), props => props.disabled ? \"none\" : \"inherit\", props => props.disabled ? \"none\" : \"pointer\", Text, props => props.$loading ? \"1rem\" : 0, props => props.disabled ? 0.5 : 1, props => getButtonHoverBackground(props.theme, props.intent), props => getButtonHoverBorderColor(props.theme, props.intent), props => props.theme.colors.primary);\nexport const StyledButton = _styled.button.withConfig({\n  displayName: \"Buttonstyles__StyledButton\",\n  componentId: \"sc-8ursji-1\"\n})([\"\", \"\"], ButtonStyle);","map":{"version":3,"sources":["/Users/marcusmattus/ethdex/src/components/Button/Button.styles.tsx"],"names":["css","getButtonBackground","theme","intent","colors","red","green","black","primary","getButtonHoverBackground","primaryDark","getButtonBorderColor","name","lightGrey","borderGrey","getButtonHoverBorderColor","Text","styled","div","ButtonStyle","props","justifyContent","alwaysWhite","disabled","$loading","StyledButton","button"],"mappings":"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","sourcesContent":["import { css } from \"styled-components\";\nimport styled, { DefaultTheme } from \"styled-components/macro\";\n\nimport { ButtonIntent, ButtonJustifyContent } from \"./Button\";\n\nfunction getButtonBackground(\n  theme: DefaultTheme,\n  intent?: ButtonIntent\n): string {\n  switch (intent) {\n    case \"destructive\":\n      return theme.colors.red;\n    case \"positive\":\n      return theme.colors.green;\n    case \"neutral\":\n      return theme.colors.black;\n    default:\n      return theme.colors.primary;\n  }\n}\n\nfunction getButtonHoverBackground(\n  theme: DefaultTheme,\n  intent?: ButtonIntent\n): string {\n  switch (intent) {\n    case \"destructive\":\n      return theme.colors.red;\n    case \"positive\":\n      return theme.colors.green;\n    case \"neutral\":\n      return theme.colors.black;\n    default:\n      return theme.colors.primaryDark;\n  }\n}\n\nfunction getButtonBorderColor(theme: DefaultTheme, intent?: ButtonIntent) {\n  if (intent === \"neutral\") {\n    return theme.name === \"dark\"\n      ? theme.colors.lightGrey\n      : theme.colors.borderGrey;\n  }\n\n  return theme.colors.borderGrey;\n}\n\nfunction getButtonHoverBorderColor(theme: DefaultTheme, intent?: ButtonIntent) {\n  if (intent === \"neutral\") {\n    return theme.colors.lightGrey;\n  }\n\n  return theme.colors.primaryDark;\n}\n\nexport const Text = styled.div`\n  transition: opacity 0.3s ease-out;\n`;\n\ntype StyledButtonProps = {\n  disabled?: boolean;\n  $loading?: boolean;\n  intent?: ButtonIntent;\n  justifyContent?: ButtonJustifyContent;\n};\n\nexport const ButtonStyle = css<StyledButtonProps>`\n  display: flex;\n  align-items: center;\n  justify-content: ${(props) => props.justifyContent || \"center\"};\n  width: 100%;\n  height: 3rem;\n  padding: 0 1rem;\n  font-size: 0.9375rem;\n  font-weight: 600;\n  text-transform: uppercase;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  border-radius: 2px;\n  border-style: \"solid\";\n  border-width: 1px;\n  border-color: ${(props) => getButtonBorderColor(props.theme, props.intent)};\n  /* Use blue text on a netral light mode button, otherwise white. */\n  color: ${(props) =>\n    props.intent === \"neutral\" && props.theme.name === \"light\"\n      ? props.theme.colors.primary\n      : props.theme.colors.alwaysWhite};\n  background: ${(props) => getButtonBackground(props.theme, props.intent)};\n  pointer-events: ${(props) => (props.disabled ? \"none\" : \"inherit\")};\n  cursor: ${(props) => (props.disabled ? \"none\" : \"pointer\")};\n\n  ${Text} {\n    margin-right: ${(props) => (props.$loading ? \"1rem\" : 0)};\n    opacity: ${(props) => (props.disabled ? 0.5 : 1)};\n  }\n\n  &:focus,\n  &:hover {\n    outline: 0;\n    background: ${(props) =>\n      getButtonHoverBackground(props.theme, props.intent)};\n    border-color: ${(props) =>\n      getButtonHoverBorderColor(props.theme, props.intent)};\n  }\n\n  &:active {\n    border-color: ${(props) => props.theme.colors.primary};\n  }\n`;\n\nexport const StyledButton = styled.button`\n  ${ButtonStyle}\n`;\n"]},"metadata":{},"sourceType":"module"}