{"ast":null,"code":"var _jsxFileName = \"/Users/marcusmattus/ethdex/src/components/WalletProviderList/subcomponents/WalletProviderButton/WalletProviderButton.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { ButtonIcon, ButtonIconContainer, ButtonText, StyledButton, StyledLink } from \"./WalletProviderButton.styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst WalletProviderButton = ({\n  provider,\n  onClick\n}) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n\n  const renderInner = () => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ButtonIconContainer, {\n        children: /*#__PURE__*/_jsxDEV(ButtonIcon, {\n          src: provider.logo,\n          alt: `${provider.name} logo`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ButtonText, {\n        children: provider.isInstalled ? provider.name : `${t(\"wallet.get\")} ${provider.name}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  };\n\n  if (!provider.isInstalled) {\n    return /*#__PURE__*/_jsxDEV(StyledLink, {\n      href: provider.url,\n      target: \"_blank\",\n      children: renderInner()\n    }, provider.name, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(StyledButton, {\n    onClick: onClick,\n    children: renderInner()\n  }, provider.name, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\n_s(WalletProviderButton, \"zlIdU9EjM2llFt74AbE2KsUJXyM=\", false, function () {\n  return [useTranslation];\n});\n\n_c = WalletProviderButton;\nexport default WalletProviderButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"WalletProviderButton\");","map":{"version":3,"sources":["/Users/marcusmattus/ethdex/src/components/WalletProviderList/subcomponents/WalletProviderButton/WalletProviderButton.tsx"],"names":["React","useTranslation","ButtonIcon","ButtonIconContainer","ButtonText","StyledButton","StyledLink","WalletProviderButton","provider","onClick","t","renderInner","logo","name","isInstalled","url"],"mappings":";;;AAAA,OAAOA,KAAP,MAA0B,OAA1B;AACA,SAASC,cAAT,QAA+B,eAA/B;AAGA,SACEC,UADF,EAEEC,mBAFF,EAGEC,UAHF,EAIEC,YAJF,EAKEC,UALF,QAMO,+BANP;;;;AAaA,MAAMC,oBAA4C,GAAG,CAAC;AACpDC,EAAAA,QADoD;AAEpDC,EAAAA;AAFoD,CAAD,KAG/C;AAAA;;AACJ,QAAM;AAAEC,IAAAA;AAAF,MAAQT,cAAc,EAA5B;;AAEA,QAAMU,WAAW,GAAG,MAAM;AACxB,wBACE;AAAA,8BACE,QAAC,mBAAD;AAAA,+BACE,QAAC,UAAD;AAAY,UAAA,GAAG,EAAEH,QAAQ,CAACI,IAA1B;AAAgC,UAAA,GAAG,EAAG,GAAEJ,QAAQ,CAACK,IAAK;AAAtD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAIE,QAAC,UAAD;AAAA,kBACGL,QAAQ,CAACM,WAAT,GACGN,QAAQ,CAACK,IADZ,GAEI,GAAEH,CAAC,CAAC,YAAD,CAAe,IAAGF,QAAQ,CAACK,IAAK;AAH1C;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA,oBADF;AAYD,GAbD;;AAcA,MAAI,CAACL,QAAQ,CAACM,WAAd,EAA2B;AACzB,wBACE,QAAC,UAAD;AAAgC,MAAA,IAAI,EAAEN,QAAQ,CAACO,GAA/C;AAAoD,MAAA,MAAM,EAAC,QAA3D;AAAA,gBACGJ,WAAW;AADd,OAAiBH,QAAQ,CAACK,IAA1B;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAED,sBACE,QAAC,YAAD;AAAkC,IAAA,OAAO,EAAEJ,OAA3C;AAAA,cACGE,WAAW;AADd,KAAmBH,QAAQ,CAACK,IAA5B;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAjCD;;GAAMN,oB;UAIUN,c;;;KAJVM,oB;AAmCN,eAAeA,oBAAf","sourcesContent":["import React, { FC } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { WalletProvider } from \"../../../../constants/supportedWalletProviders\";\nimport {\n  ButtonIcon,\n  ButtonIconContainer,\n  ButtonText,\n  StyledButton,\n  StyledLink,\n} from \"./WalletProviderButton.styles\";\n\ntype ToolbarButtonProps = {\n  provider: WalletProvider;\n  onClick?: () => void;\n};\n\nconst WalletProviderButton: FC<ToolbarButtonProps> = ({\n  provider,\n  onClick,\n}) => {\n  const { t } = useTranslation();\n\n  const renderInner = () => {\n    return (\n      <>\n        <ButtonIconContainer>\n          <ButtonIcon src={provider.logo} alt={`${provider.name} logo`} />\n        </ButtonIconContainer>\n        <ButtonText>\n          {provider.isInstalled\n            ? provider.name\n            : `${t(\"wallet.get\")} ${provider.name}`}\n        </ButtonText>\n      </>\n    );\n  };\n  if (!provider.isInstalled) {\n    return (\n      <StyledLink key={provider.name} href={provider.url} target=\"_blank\">\n        {renderInner()}\n      </StyledLink>\n    );\n  }\n\n  return (\n    <StyledButton key={provider.name} onClick={onClick}>\n      {renderInner()}\n    </StyledButton>\n  );\n};\n\nexport default WalletProviderButton;\n"]},"metadata":{},"sourceType":"module"}