{"ast":null,"code":"import { createSelector, createSlice } from \"@reduxjs/toolkit\";\nimport { BigNumber } from \"bignumber.js\";\nimport { selectQuoteTokenAddress } from \"../tradeTerms/tradeTermsSlice\";\nimport { setWalletConnected, setWalletDisconnected } from \"../wallet/walletSlice\";\nconst initialState = {\n  fastGasPrice: null,\n  tokenPrices: {}\n};\nconst gasCostSlice = createSlice({\n  name: \"gasCost\",\n  initialState,\n  reducers: {\n    setFastGasPrice: (state, action) => {\n      state.fastGasPrice = action.payload;\n    },\n    setTokenPrice: (state, action) => {\n      state.tokenPrices[action.payload.tokenAddress.toLowerCase()] = action.payload.tokenPriceInWeth;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(setWalletDisconnected, () => initialState).addCase(setWalletConnected, () => initialState);\n  }\n});\nexport const selectGasPrice = state => state.gasCost.fastGasPrice;\nexport const selectQuoteTokenPrice = createSelector(state => state.gasCost.tokenPrices, selectQuoteTokenAddress, (tokenPrices, quoteTokenAddress) => tokenPrices[quoteTokenAddress]);\nexport const selectGasPriceInQuoteTokens = createSelector(selectGasPrice, selectQuoteTokenPrice, (_gasPrice, _quoteTokenPrice) => {\n  if (!_gasPrice || !_quoteTokenPrice) return null;\n  const gasPrice = new BigNumber(_gasPrice);\n  const quoteTokenPrice = new BigNumber(_quoteTokenPrice);\n  return gasPrice.dividedBy(quoteTokenPrice);\n});\nexport const {\n  setFastGasPrice,\n  setTokenPrice\n} = gasCostSlice.actions;\nexport default gasCostSlice.reducer;","map":{"version":3,"sources":["/Users/marcusmattus/ethdex/airswap-web/src/features/gasCost/gasCostSlice.ts"],"names":["createSelector","createSlice","BigNumber","selectQuoteTokenAddress","setWalletConnected","setWalletDisconnected","initialState","fastGasPrice","tokenPrices","gasCostSlice","name","reducers","setFastGasPrice","state","action","payload","setTokenPrice","tokenAddress","toLowerCase","tokenPriceInWeth","extraReducers","builder","addCase","selectGasPrice","gasCost","selectQuoteTokenPrice","quoteTokenAddress","selectGasPriceInQuoteTokens","_gasPrice","_quoteTokenPrice","gasPrice","quoteTokenPrice","dividedBy","actions","reducer"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,WAAzB,QAA2D,kBAA3D;AAEA,SAASC,SAAT,QAA0B,cAA1B;AAGA,SAASC,uBAAT,QAAwC,+BAAxC;AACA,SACEC,kBADF,EAEEC,qBAFF,QAGO,uBAHP;AAgBA,MAAMC,YAA0B,GAAG;AACjCC,EAAAA,YAAY,EAAE,IADmB;AAEjCC,EAAAA,WAAW,EAAE;AAFoB,CAAnC;AAKA,MAAMC,YAAY,GAAGR,WAAW,CAAC;AAC/BS,EAAAA,IAAI,EAAE,SADyB;AAE/BJ,EAAAA,YAF+B;AAG/BK,EAAAA,QAAQ,EAAE;AACRC,IAAAA,eAAe,EAAE,CAACC,KAAD,EAAQC,MAAR,KAA0C;AACzDD,MAAAA,KAAK,CAACN,YAAN,GAAqBO,MAAM,CAACC,OAA5B;AACD,KAHO;AAIRC,IAAAA,aAAa,EAAE,CACbH,KADa,EAEbC,MAFa,KAMV;AACHD,MAAAA,KAAK,CAACL,WAAN,CAAkBM,MAAM,CAACC,OAAP,CAAeE,YAAf,CAA4BC,WAA5B,EAAlB,IACEJ,MAAM,CAACC,OAAP,CAAeI,gBADjB;AAED;AAbO,GAHqB;AAkB/BC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CACJC,OADH,CACWjB,qBADX,EACkC,MAAMC,YADxC,EAEGgB,OAFH,CAEWlB,kBAFX,EAE+B,MAAME,YAFrC;AAGD;AAtB8B,CAAD,CAAhC;AAyBA,OAAO,MAAMiB,cAAc,GAAIV,KAAD,IAAsBA,KAAK,CAACW,OAAN,CAAcjB,YAA3D;AAEP,OAAO,MAAMkB,qBAAqB,GAAGzB,cAAc,CAChDa,KAAD,IAAsBA,KAAK,CAACW,OAAN,CAAchB,WADa,EAEjDL,uBAFiD,EAGjD,CAACK,WAAD,EAAckB,iBAAd,KAAoClB,WAAW,CAACkB,iBAAD,CAHE,CAA5C;AAMP,OAAO,MAAMC,2BAA2B,GAAG3B,cAAc,CACvDuB,cADuD,EAEvDE,qBAFuD,EAGvD,CAACG,SAAD,EAAYC,gBAAZ,KAAiC;AAC/B,MAAI,CAACD,SAAD,IAAc,CAACC,gBAAnB,EAAqC,OAAO,IAAP;AACrC,QAAMC,QAAQ,GAAG,IAAI5B,SAAJ,CAAc0B,SAAd,CAAjB;AACA,QAAMG,eAAe,GAAG,IAAI7B,SAAJ,CAAc2B,gBAAd,CAAxB;AACA,SAAOC,QAAQ,CAACE,SAAT,CAAmBD,eAAnB,CAAP;AACD,CARsD,CAAlD;AAWP,OAAO,MAAM;AAAEnB,EAAAA,eAAF;AAAmBI,EAAAA;AAAnB,IAAqCP,YAAY,CAACwB,OAAxD;AAEP,eAAexB,YAAY,CAACyB,OAA5B","sourcesContent":["import { createSelector, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nimport { BigNumber } from \"bignumber.js\";\n\nimport { RootState } from \"../../app/store\";\nimport { selectQuoteTokenAddress } from \"../tradeTerms/tradeTermsSlice\";\nimport {\n  setWalletConnected,\n  setWalletDisconnected,\n} from \"../wallet/walletSlice\";\n\nexport interface GasCostState {\n  /**\n   * \"Fast\" gas price **in WETH**\n   */\n  fastGasPrice: string | null;\n  /**\n   * Reference token prices by address, **in WETH**\n   */\n  tokenPrices: Record<string, string>;\n}\n\nconst initialState: GasCostState = {\n  fastGasPrice: null,\n  tokenPrices: {},\n};\n\nconst gasCostSlice = createSlice({\n  name: \"gasCost\",\n  initialState,\n  reducers: {\n    setFastGasPrice: (state, action: PayloadAction<string>) => {\n      state.fastGasPrice = action.payload;\n    },\n    setTokenPrice: (\n      state,\n      action: PayloadAction<{\n        tokenAddress: string;\n        tokenPriceInWeth: string;\n      }>\n    ) => {\n      state.tokenPrices[action.payload.tokenAddress.toLowerCase()] =\n        action.payload.tokenPriceInWeth;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(setWalletDisconnected, () => initialState)\n      .addCase(setWalletConnected, () => initialState);\n  },\n});\n\nexport const selectGasPrice = (state: RootState) => state.gasCost.fastGasPrice;\n\nexport const selectQuoteTokenPrice = createSelector(\n  (state: RootState) => state.gasCost.tokenPrices,\n  selectQuoteTokenAddress,\n  (tokenPrices, quoteTokenAddress) => tokenPrices[quoteTokenAddress]\n);\n\nexport const selectGasPriceInQuoteTokens = createSelector(\n  selectGasPrice,\n  selectQuoteTokenPrice,\n  (_gasPrice, _quoteTokenPrice) => {\n    if (!_gasPrice || !_quoteTokenPrice) return null;\n    const gasPrice = new BigNumber(_gasPrice);\n    const quoteTokenPrice = new BigNumber(_quoteTokenPrice);\n    return gasPrice.dividedBy(quoteTokenPrice);\n  }\n);\n\nexport const { setFastGasPrice, setTokenPrice } = gasCostSlice.actions;\n\nexport default gasCostSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}