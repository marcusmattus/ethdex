{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useMemo } from \"react\";\nimport { useRouteMatch } from \"react-router-dom\";\nimport { DEFAULT_LOCALE, getUserLanguage, SUPPORTED_LOCALES } from \"../constants/locales\";\nimport { AppRoutes, SwapRoutes } from \"../routes\";\n\nfunction transformStringToSupportedLanguage(value) {\n  const locale = value;\n\n  if (SUPPORTED_LOCALES.includes(locale)) {\n    return locale;\n  }\n\n  return undefined;\n}\n\nconst useAppRouteParams = () => {\n  _s();\n\n  const routeMatch = useRouteMatch(`/:routeOrLang`);\n  const routeWithLangMatch = useRouteMatch(`/:lang/:route`);\n  const swapMatch = useRouteMatch(`/:route/:${SwapRoutes.tokenFrom}/:${SwapRoutes.tokenTo}`);\n  const swapWithLangMatch = useRouteMatch(`/:lang/:route/:${SwapRoutes.tokenFrom}/:${SwapRoutes.tokenTo}`);\n  const userLanguage = useMemo(() => getUserLanguage(), []);\n  const swapWithLangMatchData = useMemo(() => {\n    if (swapWithLangMatch) {\n      const lang = transformStringToSupportedLanguage(swapWithLangMatch.params.lang) || DEFAULT_LOCALE;\n      const {\n        tokenFrom,\n        tokenTo\n      } = swapWithLangMatch.params;\n      return {\n        lang,\n        tokenFrom,\n        tokenTo,\n        route: AppRoutes.swap,\n        url: swapWithLangMatch.url,\n        urlWithoutLang: `/${AppRoutes.swap}/${swapWithLangMatch.params.tokenFrom}/${swapWithLangMatch.params.tokenTo}/`,\n        justifiedBaseUrl: `/${lang}`\n      };\n    }\n  }, [swapWithLangMatch]);\n  const swapMatchData = useMemo(() => {\n    if (swapMatch) {\n      const {\n        tokenFrom,\n        tokenTo\n      } = swapMatch.params;\n      return {\n        tokenFrom,\n        tokenTo,\n        route: swapMatch.params.route,\n        lang: userLanguage,\n        url: swapMatch.url,\n        urlWithoutLang: swapMatch.url,\n        justifiedBaseUrl: \"\"\n      };\n    }\n  }, [swapMatch, userLanguage]);\n  const routeWithLangMatchData = useMemo(() => {\n    if (routeWithLangMatch) {\n      const lang = transformStringToSupportedLanguage(routeWithLangMatch.params.lang) || DEFAULT_LOCALE;\n      return {\n        lang,\n        route: routeWithLangMatch.params.route,\n        url: routeWithLangMatch.url,\n        urlWithoutLang: `/${routeWithLangMatch.params.route}`,\n        justifiedBaseUrl: `/${lang}`\n      };\n    }\n  }, [routeWithLangMatch]);\n  const routeMatchData = useMemo(() => {\n    if (routeMatch) {\n      const {\n        routeOrLang\n      } = routeMatch.params;\n      const lang = transformStringToSupportedLanguage(routeOrLang);\n      return {\n        route: lang ? undefined : routeMatch.params.routeOrLang,\n        lang: lang || DEFAULT_LOCALE,\n        url: routeMatch.url,\n        urlWithoutLang: lang ? \"\" : routeMatch.url,\n        justifiedBaseUrl: lang ? `/${lang}` : \"\"\n      };\n    }\n  }, [routeMatch]);\n\n  if (swapWithLangMatchData) {\n    return swapWithLangMatchData;\n  }\n\n  if (swapMatchData) {\n    return swapMatchData;\n  }\n\n  if (routeWithLangMatchData) {\n    return routeWithLangMatchData;\n  }\n\n  if (routeMatchData) {\n    return routeMatchData;\n  }\n\n  return {\n    lang: userLanguage,\n    url: \"\",\n    urlWithoutLang: \"\",\n    justifiedBaseUrl: \"\"\n  };\n};\n\n_s(useAppRouteParams, \"oEhsW2tSVcZVkeGdYKlWU98UQZY=\", false, function () {\n  return [useRouteMatch, useRouteMatch, useRouteMatch, useRouteMatch];\n});\n\nexport default useAppRouteParams;","map":{"version":3,"sources":["/Users/marcusmattus/ethdex/airswap-web/src/hooks/useAppRouteParams.ts"],"names":["useMemo","useRouteMatch","DEFAULT_LOCALE","getUserLanguage","SUPPORTED_LOCALES","AppRoutes","SwapRoutes","transformStringToSupportedLanguage","value","locale","includes","undefined","useAppRouteParams","routeMatch","routeWithLangMatch","swapMatch","tokenFrom","tokenTo","swapWithLangMatch","userLanguage","swapWithLangMatchData","lang","params","route","swap","url","urlWithoutLang","justifiedBaseUrl","swapMatchData","routeWithLangMatchData","routeMatchData","routeOrLang"],"mappings":"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","sourcesContent":["import { useMemo } from \"react\";\nimport { useRouteMatch } from \"react-router-dom\";\n\nimport {\n  DEFAULT_LOCALE,\n  getUserLanguage,\n  SUPPORTED_LOCALES,\n  SupportedLocale,\n} from \"../constants/locales\";\nimport { AppRoutes, SwapRoutes } from \"../routes\";\n\nexport interface AppRouteParams {\n  lang: SupportedLocale;\n  route?: AppRoutes;\n  tokenFrom?: string;\n  tokenTo?: string;\n  /**\n   * Url from useRouteMatch\n   */\n  url: string;\n  /**\n   * Url without language, ie: /swap/0x1234/0x5678, or /join or empty string\n   */\n  urlWithoutLang: string;\n  /**\n   * Base url with optional languge, ie: /join or /fr/swap or empty string\n   */\n  justifiedBaseUrl: string;\n}\n\nfunction transformStringToSupportedLanguage(\n  value: string\n): SupportedLocale | undefined {\n  const locale = value as SupportedLocale;\n  if (SUPPORTED_LOCALES.includes(locale)) {\n    return locale;\n  }\n\n  return undefined;\n}\n\nconst useAppRouteParams = (): AppRouteParams => {\n  const routeMatch = useRouteMatch<{ routeOrLang?: string }>(`/:routeOrLang`);\n\n  const routeWithLangMatch = useRouteMatch<{\n    lang: SupportedLocale;\n    route?: AppRoutes;\n  }>(`/:lang/:route`);\n\n  const swapMatch = useRouteMatch<{\n    route?: AppRoutes.swap;\n    tokenFrom?: string;\n    tokenTo?: string;\n  }>(`/:route/:${SwapRoutes.tokenFrom}/:${SwapRoutes.tokenTo}`);\n\n  const swapWithLangMatch = useRouteMatch<{\n    lang: SupportedLocale;\n    route?: AppRoutes.swap;\n    tokenFrom?: string;\n    tokenTo?: string;\n  }>(`/:lang/:route/:${SwapRoutes.tokenFrom}/:${SwapRoutes.tokenTo}`);\n\n  const userLanguage = useMemo(() => getUserLanguage(), []);\n\n  const swapWithLangMatchData = useMemo(() => {\n    if (swapWithLangMatch) {\n      const lang =\n        transformStringToSupportedLanguage(swapWithLangMatch.params.lang) ||\n        DEFAULT_LOCALE;\n\n      const { tokenFrom, tokenTo } = swapWithLangMatch.params;\n\n      return {\n        lang,\n        tokenFrom,\n        tokenTo,\n        route: AppRoutes.swap,\n        url: swapWithLangMatch.url,\n        urlWithoutLang: `/${AppRoutes.swap}/${swapWithLangMatch.params.tokenFrom}/${swapWithLangMatch.params.tokenTo}/`,\n        justifiedBaseUrl: `/${lang}`,\n      };\n    }\n  }, [swapWithLangMatch]);\n\n  const swapMatchData = useMemo(() => {\n    if (swapMatch) {\n      const { tokenFrom, tokenTo } = swapMatch.params;\n\n      return {\n        tokenFrom,\n        tokenTo,\n        route: swapMatch.params.route,\n        lang: userLanguage,\n        url: swapMatch.url,\n        urlWithoutLang: swapMatch.url,\n        justifiedBaseUrl: \"\",\n      };\n    }\n  }, [swapMatch, userLanguage]);\n\n  const routeWithLangMatchData = useMemo(() => {\n    if (routeWithLangMatch) {\n      const lang =\n        transformStringToSupportedLanguage(routeWithLangMatch.params.lang) ||\n        DEFAULT_LOCALE;\n\n      return {\n        lang,\n        route: routeWithLangMatch.params.route,\n        url: routeWithLangMatch.url,\n        urlWithoutLang: `/${routeWithLangMatch.params.route}`,\n        justifiedBaseUrl: `/${lang}`,\n      };\n    }\n  }, [routeWithLangMatch]);\n\n  const routeMatchData = useMemo(() => {\n    if (routeMatch) {\n      const { routeOrLang } = routeMatch.params;\n      const lang = transformStringToSupportedLanguage(routeOrLang as string);\n\n      return {\n        route: lang ? undefined : (routeMatch.params.routeOrLang as AppRoutes),\n        lang: lang || DEFAULT_LOCALE,\n        url: routeMatch.url,\n        urlWithoutLang: lang ? \"\" : routeMatch.url,\n        justifiedBaseUrl: lang ? `/${lang}` : \"\",\n      };\n    }\n  }, [routeMatch]);\n\n  if (swapWithLangMatchData) {\n    return swapWithLangMatchData;\n  }\n\n  if (swapMatchData) {\n    return swapMatchData;\n  }\n\n  if (routeWithLangMatchData) {\n    return routeWithLangMatchData;\n  }\n\n  if (routeMatchData) {\n    return routeMatchData;\n  }\n\n  return {\n    lang: userLanguage,\n    url: \"\",\n    urlWithoutLang: \"\",\n    justifiedBaseUrl: \"\",\n  };\n};\n\nexport default useAppRouteParams;\n"]},"metadata":{},"sourceType":"module"}