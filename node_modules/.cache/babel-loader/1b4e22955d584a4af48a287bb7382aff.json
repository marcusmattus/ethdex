{"ast":null,"code":"var _jsxFileName = \"/Users/marcusmattus/ethdex/src/components/ErrorList/ErrorList.tsx\",\n    _s = $RefreshSig$();\n\nimport { useRef, useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport useWindowSize from \"../../helpers/useWindowSize\";\nimport { OverlayActionButton } from \"../Overlay/Overlay.styles\";\nimport { InfoHeading } from \"../Typography/Typography\";\nimport { Container, StyledErrorList, StyledError, ErrorTextContainer, LegendDivider, StyledScrollContainer, StyledErrorIcon, StyledSubText } from \"./ErrorList.styles\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ErrorList = ({\n  errors = [],\n  handleClick\n}) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const containerRef = useRef(null);\n  const buttonRef = useRef(null);\n  const scrollContainerRef = useRef(null);\n  const [overflow, setOverflow] = useState(false);\n  const {\n    width,\n    height\n  } = useWindowSize();\n\n  const StyledErrors = () => {\n    if (!errors.length) return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: errors.map((error, idx) => {\n        const subText = error.toLowerCase();\n        return /*#__PURE__*/_jsxDEV(StyledError, {\n          children: [/*#__PURE__*/_jsxDEV(StyledErrorIcon, {\n            name: \"information-circle-outline\",\n            iconSize: 1.5\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ErrorTextContainer, {\n            children: [/*#__PURE__*/_jsxDEV(InfoHeading, {\n              children: t(`validatorErrors.${error}`)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(StyledSubText, {\n              children: t(`validatorErrors.${subText}`)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 15\n          }, this)]\n        }, idx, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false);\n  };\n\n  useEffect(() => {\n    if (containerRef.current && scrollContainerRef.current && buttonRef.current) {\n      const {\n        offsetTop,\n        scrollHeight\n      } = scrollContainerRef.current;\n      const {\n        scrollHeight: buttonHeight\n      } = buttonRef.current;\n      setOverflow(scrollHeight + offsetTop + buttonHeight > containerRef.current.offsetHeight);\n    }\n  }, [containerRef, scrollContainerRef, width, height, errors.length]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    ref: containerRef,\n    children: [/*#__PURE__*/_jsxDEV(LegendDivider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StyledScrollContainer, {\n      $overflow: overflow,\n      ref: scrollContainerRef,\n      children: /*#__PURE__*/_jsxDEV(StyledErrorList, {\n        children: /*#__PURE__*/_jsxDEV(StyledErrors, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OverlayActionButton, {\n      ref: buttonRef,\n      onClick: handleClick,\n      children: t(\"common.back\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ErrorList, \"dP9eVZmPbxvh9tr8Uq4naCaZedo=\", false, function () {\n  return [useTranslation, useWindowSize];\n});\n\n_c = ErrorList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ErrorList\");","map":{"version":3,"sources":["/Users/marcusmattus/ethdex/src/components/ErrorList/ErrorList.tsx"],"names":["useRef","useEffect","useState","useTranslation","useWindowSize","OverlayActionButton","InfoHeading","Container","StyledErrorList","StyledError","ErrorTextContainer","LegendDivider","StyledScrollContainer","StyledErrorIcon","StyledSubText","ErrorList","errors","handleClick","t","containerRef","buttonRef","scrollContainerRef","overflow","setOverflow","width","height","StyledErrors","length","map","error","idx","subText","toLowerCase","current","offsetTop","scrollHeight","buttonHeight","offsetHeight"],"mappings":"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","sourcesContent":["import { useRef, useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport translation from \"../../../public/locales/en/translation.json\";\nimport useWindowSize from \"../../helpers/useWindowSize\";\nimport { OverlayActionButton } from \"../Overlay/Overlay.styles\";\nimport { InfoHeading } from \"../Typography/Typography\";\nimport {\n  Container,\n  StyledErrorList,\n  StyledError,\n  ErrorTextContainer,\n  LegendDivider,\n  StyledScrollContainer,\n  StyledErrorIcon,\n  StyledSubText,\n} from \"./ErrorList.styles\";\n\nexport type Error = keyof typeof translation[\"validatorErrors\"];\n\ntype ErrorListProps = {\n  errors: Error[];\n  handleClick: () => void;\n};\n\nexport const ErrorList = ({ errors = [], handleClick }: ErrorListProps) => {\n  const { t } = useTranslation();\n  const containerRef = useRef<HTMLDivElement>(null);\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const scrollContainerRef = useRef<HTMLDivElement>(null);\n  const [overflow, setOverflow] = useState(false);\n  const { width, height } = useWindowSize();\n\n  const StyledErrors = () => {\n    if (!errors.length) return <></>;\n    return (\n      <>\n        {errors.map((error, idx) => {\n          const subText = error.toLowerCase() as Error;\n          return (\n            <StyledError key={idx}>\n              <StyledErrorIcon\n                name=\"information-circle-outline\"\n                iconSize={1.5}\n              />\n              <ErrorTextContainer>\n                <InfoHeading>{t(`validatorErrors.${error}`)}</InfoHeading>\n                <StyledSubText>{t(`validatorErrors.${subText}`)}</StyledSubText>\n              </ErrorTextContainer>\n            </StyledError>\n          );\n        })}\n      </>\n    );\n  };\n\n  useEffect(() => {\n    if (\n      containerRef.current &&\n      scrollContainerRef.current &&\n      buttonRef.current\n    ) {\n      const { offsetTop, scrollHeight } = scrollContainerRef.current;\n      const { scrollHeight: buttonHeight } = buttonRef.current;\n      setOverflow(\n        scrollHeight + offsetTop + buttonHeight >\n          containerRef.current.offsetHeight\n      );\n    }\n  }, [containerRef, scrollContainerRef, width, height, errors.length]);\n\n  return (\n    <Container ref={containerRef}>\n      <LegendDivider />\n      <StyledScrollContainer $overflow={overflow} ref={scrollContainerRef}>\n        <StyledErrorList>\n          <StyledErrors />\n        </StyledErrorList>\n      </StyledScrollContainer>\n      <OverlayActionButton ref={buttonRef} onClick={handleClick}>\n        {t(\"common.back\")}\n      </OverlayActionButton>\n    </Container>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}