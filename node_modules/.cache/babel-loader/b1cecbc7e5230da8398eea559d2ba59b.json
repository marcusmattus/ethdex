{"ast":null,"code":"var _jsxFileName = \"/Users/marcusmattus/ethdex/src/components/TransactionsTab/subcomponents/CopyAddressButton/CopyAdressButton.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useRef, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport writeAddressToClipboard from \"../../../../helpers/writeAddressToClipboard\";\nimport selectElement from \"../../helpers/selectElement\";\nimport { StyledIcon, WalletMobileMenuButton, WalletMobileMenuDiv } from \"../WalletMobileMenu/WalletMobileMenu.styles\";\nimport { Text } from \"./CopyAdressButton.styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CopyAdressButton = ({\n  address\n}) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const walletTextRef = useRef(null);\n  const [showAddress, setShowAddress] = useState(false);\n  const [writeAddressToClipboardSuccess, setWriteAddressToClipboardSuccess] = useState(false);\n  const iconName = writeAddressToClipboardSuccess ? \"check\" : \"copy\";\n  useEffect(() => {\n    if (showAddress && walletTextRef.current) {\n      selectElement(walletTextRef.current);\n    }\n  }, [showAddress]);\n\n  const handleClick = async () => {\n    setShowAddress(true);\n    setWriteAddressToClipboardSuccess(await writeAddressToClipboard(address));\n  };\n\n  if (showAddress) {\n    return /*#__PURE__*/_jsxDEV(WalletMobileMenuDiv, {\n      onClick: handleClick,\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        ref: walletTextRef,\n        children: address\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StyledIcon, {\n        $isSuccess: writeAddressToClipboardSuccess,\n        iconSize: 1,\n        name: iconName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(WalletMobileMenuButton, {\n    onClick: handleClick,\n    children: [/*#__PURE__*/_jsxDEV(Text, {\n      children: t(\"wallet.copyAddress\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StyledIcon, {\n      iconSize: 1,\n      name: \"copy\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CopyAdressButton, \"XI3bkpeUFJ3/dMuV0FhBXdA0js8=\", false, function () {\n  return [useTranslation];\n});\n\n_c = CopyAdressButton;\nexport default CopyAdressButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"CopyAdressButton\");","map":{"version":3,"sources":["/Users/marcusmattus/ethdex/src/components/TransactionsTab/subcomponents/CopyAddressButton/CopyAdressButton.tsx"],"names":["useEffect","useRef","useState","useTranslation","writeAddressToClipboard","selectElement","StyledIcon","WalletMobileMenuButton","WalletMobileMenuDiv","Text","CopyAdressButton","address","t","walletTextRef","showAddress","setShowAddress","writeAddressToClipboardSuccess","setWriteAddressToClipboardSuccess","iconName","current","handleClick"],"mappings":";;;AAAA,SAAaA,SAAb,EAAwBC,MAAxB,EAAgCC,QAAhC,QAAgD,OAAhD;AACA,SAASC,cAAT,QAA+B,eAA/B;AAEA,OAAOC,uBAAP,MAAoC,6CAApC;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,SACEC,UADF,EAEEC,sBAFF,EAGEC,mBAHF,QAIO,6CAJP;AAKA,SAASC,IAAT,QAAqB,2BAArB;;;AAMA,MAAMC,gBAA2C,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AAAA;;AACnE,QAAM;AAAEC,IAAAA;AAAF,MAAQT,cAAc,EAA5B;AACA,QAAMU,aAAa,GAAGZ,MAAM,CAAiB,IAAjB,CAA5B;AACA,QAAM,CAACa,WAAD,EAAcC,cAAd,IAAgCb,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CACJc,8BADI,EAEJC,iCAFI,IAGFf,QAAQ,CAAC,KAAD,CAHZ;AAKA,QAAMgB,QAAQ,GAAGF,8BAA8B,GAAG,OAAH,GAAa,MAA5D;AAEAhB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIc,WAAW,IAAID,aAAa,CAACM,OAAjC,EAA0C;AACxCd,MAAAA,aAAa,CAACQ,aAAa,CAACM,OAAf,CAAb;AACD;AACF,GAJQ,EAIN,CAACL,WAAD,CAJM,CAAT;;AAMA,QAAMM,WAAW,GAAG,YAAY;AAC9BL,IAAAA,cAAc,CAAC,IAAD,CAAd;AACAE,IAAAA,iCAAiC,CAAC,MAAMb,uBAAuB,CAACO,OAAD,CAA9B,CAAjC;AACD,GAHD;;AAKA,MAAIG,WAAJ,EAAiB;AACf,wBACE,QAAC,mBAAD;AAAqB,MAAA,OAAO,EAAEM,WAA9B;AAAA,8BACE,QAAC,IAAD;AAAM,QAAA,GAAG,EAAEP,aAAX;AAAA,kBAA2BF;AAA3B;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,UAAD;AACE,QAAA,UAAU,EAAEK,8BADd;AAEE,QAAA,QAAQ,EAAE,CAFZ;AAGE,QAAA,IAAI,EAAEE;AAHR;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAUD;;AAED,sBACE,QAAC,sBAAD;AAAwB,IAAA,OAAO,EAAEE,WAAjC;AAAA,4BACE,QAAC,IAAD;AAAA,gBAAOR,CAAC,CAAC,oBAAD;AAAR;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,UAAD;AAAY,MAAA,QAAQ,EAAE,CAAtB;AAAyB,MAAA,IAAI,EAAC;AAA9B;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CAzCD;;GAAMF,gB;UACUP,c;;;KADVO,gB;AA2CN,eAAeA,gBAAf","sourcesContent":["import { FC, useEffect, useRef, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport writeAddressToClipboard from \"../../../../helpers/writeAddressToClipboard\";\nimport selectElement from \"../../helpers/selectElement\";\nimport {\n  StyledIcon,\n  WalletMobileMenuButton,\n  WalletMobileMenuDiv,\n} from \"../WalletMobileMenu/WalletMobileMenu.styles\";\nimport { Text } from \"./CopyAdressButton.styles\";\n\ntype CopyAdressButtonProps = {\n  address: string;\n};\n\nconst CopyAdressButton: FC<CopyAdressButtonProps> = ({ address }) => {\n  const { t } = useTranslation();\n  const walletTextRef = useRef<HTMLDivElement>(null);\n  const [showAddress, setShowAddress] = useState(false);\n  const [\n    writeAddressToClipboardSuccess,\n    setWriteAddressToClipboardSuccess,\n  ] = useState(false);\n\n  const iconName = writeAddressToClipboardSuccess ? \"check\" : \"copy\";\n\n  useEffect(() => {\n    if (showAddress && walletTextRef.current) {\n      selectElement(walletTextRef.current);\n    }\n  }, [showAddress]);\n\n  const handleClick = async () => {\n    setShowAddress(true);\n    setWriteAddressToClipboardSuccess(await writeAddressToClipboard(address));\n  };\n\n  if (showAddress) {\n    return (\n      <WalletMobileMenuDiv onClick={handleClick}>\n        <Text ref={walletTextRef}>{address}</Text>\n        <StyledIcon\n          $isSuccess={writeAddressToClipboardSuccess}\n          iconSize={1}\n          name={iconName}\n        />\n      </WalletMobileMenuDiv>\n    );\n  }\n\n  return (\n    <WalletMobileMenuButton onClick={handleClick}>\n      <Text>{t(\"wallet.copyAddress\")}</Text>\n      <StyledIcon iconSize={1} name=\"copy\" />\n    </WalletMobileMenuButton>\n  );\n};\n\nexport default CopyAdressButton;\n"]},"metadata":{},"sourceType":"module"}