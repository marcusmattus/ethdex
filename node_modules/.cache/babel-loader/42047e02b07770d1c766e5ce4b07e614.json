{"ast":null,"code":"var _jsxFileName = \"/Users/marcusmattus/ethdex/src/features/wallet/Wallet.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useBeforeunload } from \"react-beforeunload\";\nimport { useTranslation } from \"react-i18next\";\nimport { Light, Wrapper } from \"@airswap/libraries\";\nimport * as LightContract from \"@airswap/light/build/contracts/Light.sol/Light.json\"; //@ts-ignore\n\nimport * as lightDeploys from \"@airswap/light/deploys.js\";\nimport { UnsupportedChainIdError, useWeb3React } from \"@web3-react/core\";\nimport { WalletConnectConnector } from \"@web3-react/walletconnect-connector\";\nimport { Contract } from \"ethers\";\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\nimport * as Weth9Contract from \"../../assets/weth9.abi.json\";\nimport TransactionsTab from \"../../components/TransactionsTab/TransactionsTab\";\nimport WalletButton from \"../../components/WalletButton/WalletButton\";\nimport Weth9Deploys from \"../../constants/Weth9\";\nimport SUPPORTED_WALLET_PROVIDERS from \"../../constants/supportedWalletProviders\";\nimport { StyledAirswapButton, StyledMenuButton, StyledSettingsButton, TopBar } from \"../../styled-components/TopBar/Topbar\";\nimport { subscribeToTransfersAndApprovals } from \"../balances/balancesApi\";\nimport { decrementBalanceBy, incrementBalanceBy, requestActiveTokenAllowancesLight, requestActiveTokenAllowancesWrapper, requestActiveTokenBalances, selectBalances, setAllowanceLight, setAllowanceWrapper } from \"../balances/balancesSlice\";\nimport { getTransactionsLocalStorageKey } from \"../metadata/metadataApi\";\nimport { fetchAllTokens, fetchUnkownTokens, selectActiveTokens, selectAllTokenInfo } from \"../metadata/metadataSlice\";\nimport { fetchSupportedTokens } from \"../registry/registrySlice\";\nimport handleTransaction from \"../transactions/handleTransaction\";\nimport subscribeToSwapEvents from \"../transactions/swapEventSubscriber\";\nimport { selectPendingTransactions, selectTransactions, setTransactions } from \"../transactions/transactionsSlice\";\nimport subscribeToWrapEvents from \"../transactions/wrapEventSubscriber\";\nimport { clearLastAccount, loadLastAccount, saveLastAccount } from \"./walletApi\";\nimport { selectWallet, setWalletConnected, setWalletDisconnected } from \"./walletSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Wallet = ({\n  setShowWalletList,\n  transactionsTabOpen,\n  setTransactionsTabOpen,\n  onAirswapButtonClick,\n  onMobileMenuButtonClick\n}) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    chainId,\n    account,\n    activate,\n    deactivate,\n    active,\n    library,\n    error\n  } = useWeb3React(); // Redux\n\n  const dispatch = useAppDispatch();\n  const activeTokens = useAppSelector(selectActiveTokens);\n  const balances = useAppSelector(selectBalances);\n  const {\n    providerName\n  } = useAppSelector(selectWallet);\n  const transactions = useAppSelector(selectTransactions);\n  const pendingTransactions = useAppSelector(selectPendingTransactions);\n  const allTokens = useAppSelector(selectAllTokenInfo); // Local component state\n\n  const [, setIsActivating] = useState(false);\n  const [settingsOpen, setSettingsOpen] = useState(false);\n  const [connector, setConnector] = useState();\n  const [provider, setProvider] = useState();\n  const [activated, setActivated] = useState(false);\n  const [lightContract, setLightContract] = useState();\n  const [wrapContract, setWrapContract] = useState();\n  useBeforeunload(() => {\n    if (lightContract) {\n      lightContract.removeAllListeners(\"Swap\");\n    }\n\n    if (wrapContract) {\n      wrapContract.removeAllListeners(\"Withdrawal\");\n      wrapContract.removeAllListeners(\"Deposit\");\n    }\n  });\n  useEffect(() => {\n    if (library && chainId && account && lightContract && wrapContract) {\n      subscribeToSwapEvents({\n        account: account,\n        lightContract,\n        library,\n        chainId,\n        dispatch\n      });\n      subscribeToWrapEvents({\n        wrapContract,\n        library,\n        dispatch\n      });\n      return () => {\n        if (lightContract) {\n          lightContract.removeAllListeners(\"Swap\");\n        }\n\n        if (wrapContract) {\n          wrapContract.removeAllListeners(\"Withdrawal\");\n          wrapContract.removeAllListeners(\"Deposit\");\n        }\n      };\n    }\n  }, [dispatch, library, chainId, account, lightContract, wrapContract]);\n  useEffect(() => {\n    if (chainId && account && library) {\n      const lightContract = new Contract(lightDeploys[chainId], LightContract.abi, //@ts-ignore\n      library);\n      setLightContract(lightContract);\n      const wrapContract = new Contract(Weth9Deploys[chainId], Weth9Contract.abi, //@ts-ignore\n      library);\n      setWrapContract(wrapContract);\n    }\n  }, [library, chainId, account]); // Auto-activate if user has connected before on (first render)\n\n  useEffect(() => {\n    const lastConnectedAccount = loadLastAccount();\n\n    if (lastConnectedAccount === null || lastConnectedAccount === void 0 ? void 0 : lastConnectedAccount.address) {\n      setIsActivating(true);\n      const connector = lastConnectedAccount.provider.getConnector();\n      setConnector(connector);\n      setProvider(lastConnectedAccount.provider);\n      activate(connector).then(() => {\n        setActivated(true);\n      }).finally(() => {\n        setIsActivating(false);\n      });\n    }\n  }, [activate, activated]); // Side effects for connecting a wallet from SwapWidget\n\n  useEffect(() => {\n    if (providerName) {\n      const provider = SUPPORTED_WALLET_PROVIDERS.find(provider => provider.name === providerName);\n      setProvider(provider);\n      setConnector(provider.getConnector());\n    }\n  }, [providerName]); // Trigger request for balances and allowances once account is connected\n\n  useEffect(() => {\n    if (active && account && chainId && library && connector && provider) {\n      // Dispatch a general action to indicate wallet has changed\n      dispatch(setWalletConnected({\n        chainId,\n        address: account\n      }));\n      saveLastAccount(account, provider);\n      Promise.all([dispatch(fetchAllTokens()), dispatch(fetchSupportedTokens({\n        provider: library\n      }))]).then(() => {\n        dispatch(requestActiveTokenBalances({\n          provider: library\n        }));\n        dispatch(requestActiveTokenAllowancesLight({\n          provider: library\n        }));\n        dispatch(requestActiveTokenAllowancesWrapper({\n          provider: library\n        }));\n        dispatch(fetchUnkownTokens({\n          provider: library\n        }));\n      });\n    } else {\n      dispatch(setWalletDisconnected());\n    }\n  }, [active, account, chainId, dispatch, library, connector, provider]); // Subscribe to changes in balance\n\n  useEffect(() => {\n    if (!library || !account || !connector || chainId === undefined || !activeTokens.length || balances.lastFetch === null || balances.status !== \"idle\") return;\n    let teardownTransferListener;\n\n    if (activeTokens.length) {\n      teardownTransferListener = subscribeToTransfersAndApprovals({\n        activeTokenAddresses: activeTokens.map(t => t.address),\n        provider: library,\n        walletAddress: account,\n        spenderAddress: Light.getAddress(),\n        onBalanceChange: (tokenAddress, amount, direction) => {\n          const actionCreator = direction === \"in\" ? incrementBalanceBy : decrementBalanceBy;\n          dispatch(actionCreator({\n            tokenAddress,\n            amount: amount.toString()\n          }));\n        },\n        onApproval: (tokenAddress, spenderAddress, amount) => {\n          const actionCreator = spenderAddress === Wrapper.getAddress().toLowerCase() ? setAllowanceWrapper : setAllowanceLight;\n          dispatch(actionCreator({\n            tokenAddress,\n            amount: amount.toString()\n          }));\n        }\n      });\n    }\n\n    return () => {\n      if (teardownTransferListener) {\n        teardownTransferListener();\n      }\n    };\n  }, [activeTokens, account, library, connector, dispatch, chainId, balances.lastFetch, balances.status]);\n  useEffect(() => {\n    // Create a flag we can set to handle wallet changing between async operations\n    let walletHasChanged = false; // get transaction state from local storage and update the transactions\n\n    if (chainId && account && library) {\n      const transactionsLocalStorage = JSON.parse(localStorage.getItem(getTransactionsLocalStorageKey(account, chainId))) || {\n        all: []\n      };\n      dispatch(setTransactions(transactionsLocalStorage)); // check from all responses if one is pending... if pending, call getTransaction\n      // to see if it was a success/failure/pending. update accordingly. if pending: wait()\n      // and poll at a sensible interval.\n\n      transactionsLocalStorage.all.forEach(async tx => {\n        await handleTransaction(tx, walletHasChanged, dispatch, library);\n      });\n    }\n\n    return () => {\n      // Library & dispatch won't change, so when we tear down it's because\n      // the wallet has changed. The useEffect will run after this and set up\n      // everything for the new wallet.\n      walletHasChanged = true;\n    };\n  }, [chainId, dispatch, library, account]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TopBar, {\n      children: [/*#__PURE__*/_jsxDEV(StyledMenuButton, {\n        onClick: onMobileMenuButtonClick,\n        ariaLabel: t(\"common.select\"),\n        icon: \"menu\",\n        iconSize: 1.5625\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StyledSettingsButton, {\n        settingsOpen: settingsOpen,\n        setSettingsOpen: setSettingsOpen,\n        transactionsTabOpen: transactionsTabOpen\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(WalletButton, {\n        address: account,\n        isUnsupportedNetwork: error && error instanceof UnsupportedChainIdError,\n        glow: !!pendingTransactions.length,\n        setTransactionsTabOpen: () => setTransactionsTabOpen(true),\n        setShowWalletList: setShowWalletList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StyledAirswapButton, {\n        onClick: onAirswapButtonClick,\n        ariaLabel: t(\"common.AirSwap\"),\n        icon: \"airswap\",\n        iconSize: 2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TransactionsTab, {\n      address: account,\n      chainId: chainId,\n      open: transactionsTabOpen,\n      setTransactionsTabOpen: setTransactionsTabOpen,\n      onDisconnectWalletClicked: () => {\n        clearLastAccount();\n        deactivate();\n\n        if (connector instanceof WalletConnectConnector) {\n          connector.close();\n        }\n\n        setTransactionsTabOpen(false);\n      },\n      transactions: transactions,\n      tokens: allTokens,\n      balances: balances,\n      isUnsupportedNetwork: error && error instanceof UnsupportedChainIdError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Wallet, \"bqoOdFd4mwYu9FkN7USg1dNO16E=\", false, function () {\n  return [useTranslation, useWeb3React, useAppDispatch, useAppSelector, useAppSelector, useAppSelector, useAppSelector, useAppSelector, useAppSelector, useBeforeunload];\n});\n\n_c = Wallet;\n\nvar _c;\n\n$RefreshReg$(_c, \"Wallet\");","map":{"version":3,"sources":["/Users/marcusmattus/ethdex/src/features/wallet/Wallet.tsx"],"names":["React","useEffect","useState","useBeforeunload","useTranslation","Light","Wrapper","LightContract","lightDeploys","UnsupportedChainIdError","useWeb3React","WalletConnectConnector","Contract","useAppDispatch","useAppSelector","Weth9Contract","TransactionsTab","WalletButton","Weth9Deploys","SUPPORTED_WALLET_PROVIDERS","StyledAirswapButton","StyledMenuButton","StyledSettingsButton","TopBar","subscribeToTransfersAndApprovals","decrementBalanceBy","incrementBalanceBy","requestActiveTokenAllowancesLight","requestActiveTokenAllowancesWrapper","requestActiveTokenBalances","selectBalances","setAllowanceLight","setAllowanceWrapper","getTransactionsLocalStorageKey","fetchAllTokens","fetchUnkownTokens","selectActiveTokens","selectAllTokenInfo","fetchSupportedTokens","handleTransaction","subscribeToSwapEvents","selectPendingTransactions","selectTransactions","setTransactions","subscribeToWrapEvents","clearLastAccount","loadLastAccount","saveLastAccount","selectWallet","setWalletConnected","setWalletDisconnected","Wallet","setShowWalletList","transactionsTabOpen","setTransactionsTabOpen","onAirswapButtonClick","onMobileMenuButtonClick","t","chainId","account","activate","deactivate","active","library","error","dispatch","activeTokens","balances","providerName","transactions","pendingTransactions","allTokens","setIsActivating","settingsOpen","setSettingsOpen","connector","setConnector","provider","setProvider","activated","setActivated","lightContract","setLightContract","wrapContract","setWrapContract","removeAllListeners","abi","lastConnectedAccount","address","getConnector","then","finally","find","name","Promise","all","undefined","length","lastFetch","status","teardownTransferListener","activeTokenAddresses","map","walletAddress","spenderAddress","getAddress","onBalanceChange","tokenAddress","amount","direction","actionCreator","toString","onApproval","toLowerCase","walletHasChanged","transactionsLocalStorage","JSON","parse","localStorage","getItem","forEach","tx","close"],"mappings":"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","sourcesContent":["import React, { FC, useEffect, useState } from \"react\";\nimport { useBeforeunload } from \"react-beforeunload\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { Light, Wrapper } from \"@airswap/libraries\";\nimport * as LightContract from \"@airswap/light/build/contracts/Light.sol/Light.json\";\n//@ts-ignore\nimport * as lightDeploys from \"@airswap/light/deploys.js\";\nimport { Web3Provider } from \"@ethersproject/providers\";\nimport { UnsupportedChainIdError, useWeb3React } from \"@web3-react/core\";\nimport { WalletConnectConnector } from \"@web3-react/walletconnect-connector\";\n\nimport { Contract } from \"ethers\";\n\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\nimport * as Weth9Contract from \"../../assets/weth9.abi.json\";\nimport TransactionsTab from \"../../components/TransactionsTab/TransactionsTab\";\nimport WalletButton from \"../../components/WalletButton/WalletButton\";\nimport Weth9Deploys from \"../../constants/Weth9\";\nimport {\n  AbstractConnector,\n  WalletProvider,\n} from \"../../constants/supportedWalletProviders\";\nimport SUPPORTED_WALLET_PROVIDERS from \"../../constants/supportedWalletProviders\";\nimport {\n  StyledAirswapButton,\n  StyledMenuButton,\n  StyledSettingsButton,\n  TopBar,\n} from \"../../styled-components/TopBar/Topbar\";\nimport { subscribeToTransfersAndApprovals } from \"../balances/balancesApi\";\nimport {\n  decrementBalanceBy,\n  incrementBalanceBy,\n  requestActiveTokenAllowancesLight,\n  requestActiveTokenAllowancesWrapper,\n  requestActiveTokenBalances,\n  selectBalances,\n  setAllowanceLight,\n  setAllowanceWrapper,\n} from \"../balances/balancesSlice\";\nimport { getTransactionsLocalStorageKey } from \"../metadata/metadataApi\";\nimport {\n  fetchAllTokens,\n  fetchUnkownTokens,\n  selectActiveTokens,\n  selectAllTokenInfo,\n} from \"../metadata/metadataSlice\";\nimport { fetchSupportedTokens } from \"../registry/registrySlice\";\nimport handleTransaction from \"../transactions/handleTransaction\";\nimport subscribeToSwapEvents from \"../transactions/swapEventSubscriber\";\nimport {\n  selectPendingTransactions,\n  selectTransactions,\n  setTransactions,\n  TransactionsState,\n} from \"../transactions/transactionsSlice\";\nimport subscribeToWrapEvents from \"../transactions/wrapEventSubscriber\";\nimport {\n  clearLastAccount,\n  loadLastAccount,\n  saveLastAccount,\n} from \"./walletApi\";\nimport {\n  selectWallet,\n  setWalletConnected,\n  setWalletDisconnected,\n} from \"./walletSlice\";\n\ntype WalletPropsType = {\n  setShowWalletList: (x: boolean) => void;\n  transactionsTabOpen: boolean;\n  setTransactionsTabOpen: (x: boolean) => void;\n  onAirswapButtonClick: () => void;\n  onMobileMenuButtonClick: () => void;\n};\n\nexport const Wallet: FC<WalletPropsType> = ({\n  setShowWalletList,\n  transactionsTabOpen,\n  setTransactionsTabOpen,\n  onAirswapButtonClick,\n  onMobileMenuButtonClick,\n}) => {\n  const { t } = useTranslation();\n  const {\n    chainId,\n    account,\n    activate,\n    deactivate,\n    active,\n    library,\n    error,\n  } = useWeb3React<Web3Provider>();\n\n  // Redux\n  const dispatch = useAppDispatch();\n  const activeTokens = useAppSelector(selectActiveTokens);\n  const balances = useAppSelector(selectBalances);\n  const { providerName } = useAppSelector(selectWallet);\n  const transactions = useAppSelector(selectTransactions);\n  const pendingTransactions = useAppSelector(selectPendingTransactions);\n  const allTokens = useAppSelector(selectAllTokenInfo);\n\n  // Local component state\n  const [, setIsActivating] = useState<boolean>(false);\n  const [settingsOpen, setSettingsOpen] = useState<boolean>(false);\n\n  const [connector, setConnector] = useState<AbstractConnector>();\n  const [provider, setProvider] = useState<WalletProvider>();\n  const [activated, setActivated] = useState(false);\n  const [lightContract, setLightContract] = useState<Contract>();\n  const [wrapContract, setWrapContract] = useState<Contract>();\n\n  useBeforeunload(() => {\n    if (lightContract) {\n      lightContract.removeAllListeners(\"Swap\");\n    }\n    if (wrapContract) {\n      wrapContract.removeAllListeners(\"Withdrawal\");\n      wrapContract.removeAllListeners(\"Deposit\");\n    }\n  });\n\n  useEffect(() => {\n    if (library && chainId && account && lightContract && wrapContract) {\n      subscribeToSwapEvents({\n        account: account!,\n        lightContract,\n        library,\n        chainId,\n        dispatch,\n      });\n      subscribeToWrapEvents({\n        wrapContract,\n        library,\n        dispatch,\n      });\n      return () => {\n        if (lightContract) {\n          lightContract.removeAllListeners(\"Swap\");\n        }\n        if (wrapContract) {\n          wrapContract.removeAllListeners(\"Withdrawal\");\n          wrapContract.removeAllListeners(\"Deposit\");\n        }\n      };\n    }\n  }, [dispatch, library, chainId, account, lightContract, wrapContract]);\n  useEffect(() => {\n    if (chainId && account && library) {\n      const lightContract = new Contract(\n        lightDeploys[chainId],\n        LightContract.abi,\n        //@ts-ignore\n        library\n      );\n      setLightContract(lightContract);\n      const wrapContract = new Contract(\n        Weth9Deploys[chainId],\n        Weth9Contract.abi,\n        //@ts-ignore\n        library\n      );\n      setWrapContract(wrapContract);\n    }\n  }, [library, chainId, account]);\n\n  // Auto-activate if user has connected before on (first render)\n  useEffect(() => {\n    const lastConnectedAccount = loadLastAccount();\n    if (lastConnectedAccount?.address) {\n      setIsActivating(true);\n      const connector = lastConnectedAccount.provider.getConnector();\n      setConnector(connector);\n      setProvider(lastConnectedAccount.provider);\n      activate(connector)\n        .then(() => {\n          setActivated(true);\n        })\n        .finally(() => {\n          setIsActivating(false);\n        });\n    }\n  }, [activate, activated]);\n\n  // Side effects for connecting a wallet from SwapWidget\n\n  useEffect(() => {\n    if (providerName) {\n      const provider = SUPPORTED_WALLET_PROVIDERS.find(\n        (provider) => provider.name === providerName\n      );\n      setProvider(provider);\n      setConnector(provider!.getConnector());\n    }\n  }, [providerName]);\n\n  // Trigger request for balances and allowances once account is connected\n  useEffect(() => {\n    if (active && account && chainId && library && connector && provider) {\n      // Dispatch a general action to indicate wallet has changed\n      dispatch(\n        setWalletConnected({\n          chainId,\n          address: account,\n        })\n      );\n      saveLastAccount(account, provider);\n\n      Promise.all([\n        dispatch(fetchAllTokens()),\n        dispatch(\n          fetchSupportedTokens({\n            provider: library,\n          } as any)\n        ),\n      ]).then(() => {\n        dispatch(\n          requestActiveTokenBalances({\n            provider: library,\n          })\n        );\n        dispatch(\n          requestActiveTokenAllowancesLight({\n            provider: library,\n          })\n        );\n        dispatch(\n          requestActiveTokenAllowancesWrapper({\n            provider: library,\n          })\n        );\n        dispatch(\n          fetchUnkownTokens({\n            provider: library,\n          } as any)\n        );\n      });\n    } else {\n      dispatch(setWalletDisconnected());\n    }\n  }, [active, account, chainId, dispatch, library, connector, provider]);\n\n  // Subscribe to changes in balance\n\n  useEffect(() => {\n    if (\n      !library ||\n      !account ||\n      !connector ||\n      chainId === undefined ||\n      !activeTokens.length ||\n      balances.lastFetch === null ||\n      balances.status !== \"idle\"\n    )\n      return;\n\n    let teardownTransferListener: () => void;\n    if (activeTokens.length) {\n      teardownTransferListener = subscribeToTransfersAndApprovals({\n        activeTokenAddresses: activeTokens.map((t) => t.address),\n        provider: library,\n        walletAddress: account,\n        spenderAddress: Light.getAddress(),\n        onBalanceChange: (tokenAddress, amount, direction) => {\n          const actionCreator =\n            direction === \"in\" ? incrementBalanceBy : decrementBalanceBy;\n          dispatch(\n            actionCreator({\n              tokenAddress,\n              amount: amount.toString(),\n            })\n          );\n        },\n        onApproval: (tokenAddress, spenderAddress, amount) => {\n          const actionCreator =\n            spenderAddress === Wrapper.getAddress().toLowerCase()\n              ? setAllowanceWrapper\n              : setAllowanceLight;\n          dispatch(\n            actionCreator({\n              tokenAddress,\n              amount: amount.toString(),\n            })\n          );\n        },\n      });\n    }\n\n    return () => {\n      if (teardownTransferListener) {\n        teardownTransferListener();\n      }\n    };\n  }, [\n    activeTokens,\n    account,\n    library,\n    connector,\n    dispatch,\n    chainId,\n    balances.lastFetch,\n    balances.status,\n  ]);\n\n  useEffect(() => {\n    // Create a flag we can set to handle wallet changing between async operations\n    let walletHasChanged = false;\n\n    // get transaction state from local storage and update the transactions\n    if (chainId && account && library) {\n      const transactionsLocalStorage: TransactionsState = JSON.parse(\n        localStorage.getItem(\n          getTransactionsLocalStorageKey(account!, chainId!)\n        )!\n      ) || { all: [] };\n      dispatch(setTransactions(transactionsLocalStorage));\n\n      // check from all responses if one is pending... if pending, call getTransaction\n      // to see if it was a success/failure/pending. update accordingly. if pending: wait()\n      // and poll at a sensible interval.\n      transactionsLocalStorage.all.forEach(async (tx) => {\n        await handleTransaction(tx, walletHasChanged, dispatch, library);\n      });\n    }\n    return () => {\n      // Library & dispatch won't change, so when we tear down it's because\n      // the wallet has changed. The useEffect will run after this and set up\n      // everything for the new wallet.\n      walletHasChanged = true;\n    };\n  }, [chainId, dispatch, library, account]);\n\n  return (\n    <>\n      <TopBar>\n        <StyledMenuButton\n          onClick={onMobileMenuButtonClick}\n          ariaLabel={t(\"common.select\")}\n          icon=\"menu\"\n          iconSize={1.5625}\n        />\n        <StyledSettingsButton\n          settingsOpen={settingsOpen}\n          setSettingsOpen={setSettingsOpen}\n          transactionsTabOpen={transactionsTabOpen}\n        />\n        <WalletButton\n          address={account}\n          isUnsupportedNetwork={\n            error && error instanceof UnsupportedChainIdError\n          }\n          glow={!!pendingTransactions.length}\n          setTransactionsTabOpen={() => setTransactionsTabOpen(true)}\n          setShowWalletList={setShowWalletList}\n        />\n        <StyledAirswapButton\n          onClick={onAirswapButtonClick}\n          ariaLabel={t(\"common.AirSwap\")}\n          icon=\"airswap\"\n          iconSize={2}\n        />\n      </TopBar>\n      <TransactionsTab\n        address={account!}\n        chainId={chainId!}\n        open={transactionsTabOpen}\n        setTransactionsTabOpen={setTransactionsTabOpen}\n        onDisconnectWalletClicked={() => {\n          clearLastAccount();\n          deactivate();\n          if (connector instanceof WalletConnectConnector) {\n            connector.close();\n          }\n          setTransactionsTabOpen(false);\n        }}\n        transactions={transactions}\n        tokens={allTokens}\n        balances={balances!}\n        isUnsupportedNetwork={error && error instanceof UnsupportedChainIdError}\n      />\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}