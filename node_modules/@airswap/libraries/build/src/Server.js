"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Server = void 0;
var url = __importStar(require("url"));
var browser_or_node_1 = require("browser-or-node");
var jsonrpc_client_websocket_1 = require("@airswap/jsonrpc-client-websocket");
var constants_1 = require("@airswap/constants");
var utils_1 = require("@airswap/utils");
var Light_1 = require("./Light");
var tiny_typed_emitter_1 = require("tiny-typed-emitter");
if (!browser_or_node_1.isBrowser) {
    jsonrpc_client_websocket_1.JsonRpcWebsocket.setWebSocketFactory(function (url) {
        var ws = require('websocket').w3cwebsocket;
        return new ws(url);
    });
}
var PROTOCOL_NAMES = {
    'last-look': 'Last Look',
    'request-for-quote': 'Request for Quote',
};
var Server = /** @class */ (function (_super) {
    __extends(Server, _super);
    function Server(locator, swapContract) {
        if (swapContract === void 0) { swapContract = Light_1.Light.getAddress(); }
        var _this = _super.call(this) || this;
        _this.locator = locator;
        _this.swapContract = swapContract;
        var protocol = utils_1.parseUrl(locator).protocol;
        _this.transportProtocol = protocol.startsWith('http') ? 'http' : 'websocket';
        return _this;
    }
    Server.at = function (locator, options) {
        return __awaiter(this, void 0, void 0, function () {
            var server;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        server = new Server(locator, options === null || options === void 0 ? void 0 : options.swapContract);
                        return [4 /*yield*/, server._init(options === null || options === void 0 ? void 0 : options.initializeTimeout)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, server];
                }
            });
        });
    };
    Server.prototype.getSupportedProtocolVersion = function (protocol) {
        // Don't check supportedProtocols unless the server has initialized.
        // Important for WebSocket servers that can support either RFQ or Last Look
        this.requireInitialized();
        var supportedProtocolInfo = this.supportedProtocols.find(function (p) { return p.name === protocol; });
        if (!supportedProtocolInfo)
            return null;
        return supportedProtocolInfo.version;
    };
    Server.prototype.supportsProtocol = function (protocol, requestedVersion) {
        var supportedVersion = this.getSupportedProtocolVersion(protocol);
        if (!supportedVersion)
            return false;
        if (!requestedVersion)
            return true;
        var _a = /(\d+)\.(\d+)\.(\d+)/.exec(requestedVersion), wantedMajor = _a[1], wantedMinor = _a[2], wantedPatch = _a[3];
        var _b = /(\d+)\.(\d+)\.(\d+)/.exec(supportedVersion), supportedMajor = _b[1], supportedMinor = _b[2], supportedPatch = _b[3];
        if (wantedMajor !== supportedMajor)
            return false;
        if (parseInt(wantedMinor) > parseInt(supportedMinor))
            return false;
        if (parseInt(wantedPatch) > parseInt(supportedPatch))
            return false;
        return true;
    };
    Server.prototype.getMaxQuote = function (signerToken, senderToken) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.requireRFQSupport();
                return [2 /*return*/, this.callRPCMethod('getMaxQuote', {
                        signerToken: signerToken,
                        senderToken: senderToken,
                    })];
            });
        });
    };
    Server.prototype.getSignerSideQuote = function (senderAmount, signerToken, senderToken) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.requireRFQSupport();
                return [2 /*return*/, this.callRPCMethod('getSignerSideQuote', {
                        senderAmount: senderAmount.toString(),
                        signerToken: signerToken,
                        senderToken: senderToken,
                    })];
            });
        });
    };
    Server.prototype.getSenderSideQuote = function (signerAmount, signerToken, senderToken) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.requireRFQSupport();
                return [2 /*return*/, this.callRPCMethod('getSenderSideQuote', {
                        signerAmount: signerAmount.toString(),
                        signerToken: signerToken,
                        senderToken: senderToken,
                    })];
            });
        });
    };
    Server.prototype.getSignerSideOrder = function (senderAmount, signerToken, senderToken, senderWallet) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.requireRFQSupport();
                return [2 /*return*/, this.callRPCMethod('getSignerSideOrder', {
                        senderAmount: senderAmount.toString(),
                        signerToken: signerToken,
                        senderToken: senderToken,
                        senderWallet: senderWallet,
                    }).then(function (order) {
                        return utils_1.orderPropsToStrings(order);
                    })];
            });
        });
    };
    Server.prototype.getSenderSideOrder = function (signerAmount, signerToken, senderToken, senderWallet) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.requireRFQSupport();
                return [2 /*return*/, this.callRPCMethod('getSenderSideOrder', {
                        signerAmount: signerAmount.toString(),
                        signerToken: signerToken,
                        senderToken: senderToken,
                        senderWallet: senderWallet,
                    }).then(function (order) {
                        return utils_1.orderPropsToStrings(order);
                    })];
            });
        });
    };
    Server.prototype.subscribe = function (pairs) {
        return __awaiter(this, void 0, void 0, function () {
            var pricing;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.requireLastLookSupport();
                        return [4 /*yield*/, this.callRPCMethod('subscribe', [pairs])];
                    case 1:
                        pricing = _a.sent();
                        this.emit('pricing', pricing);
                        return [2 /*return*/, pricing];
                }
            });
        });
    };
    Server.prototype.unsubscribe = function (pairs) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.requireLastLookSupport();
                return [2 /*return*/, this.callRPCMethod('unsubscribe', [pairs])];
            });
        });
    };
    Server.prototype.subscribeAll = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.requireLastLookSupport();
                return [2 /*return*/, this.callRPCMethod('subscribeAll')];
            });
        });
    };
    Server.prototype.unsubscribeAll = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.requireLastLookSupport();
                return [2 /*return*/, this.callRPCMethod('unsubscribeAll')];
            });
        });
    };
    Server.prototype.getSenderWallet = function () {
        this.requireLastLookSupport();
        return this.senderWallet;
    };
    Server.prototype.consider = function (order) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.requireLastLookSupport();
                return [2 /*return*/, this.callRPCMethod('consider', order)];
            });
        });
    };
    Server.prototype.disconnect = function () {
        var _this = this;
        if (this.webSocketClient) {
            if (this.webSocketClient.state !== jsonrpc_client_websocket_1.WebsocketReadyStates.CLOSED) {
                this.webSocketClient.close();
                // Note that we remove listeners only after close as closing before a
                // successful connection will emit an error, and emitting an error
                // without a listener will throw. Removing listeners before close means
                // closing before connecting would cause an unpreventable throw (error
                // listener would be removed first).
                this.webSocketClient.on('close', function () {
                    _this.removeAllListeners();
                });
            }
            else {
                this.removeAllListeners();
            }
            delete this.webSocketClient;
        }
    };
    Server.prototype._init = function (initializeTimeout) {
        if (initializeTimeout === void 0) { initializeTimeout = constants_1.REQUEST_TIMEOUT; }
        if (this.transportProtocol === 'http') {
            return this._initHTTPClient(this.locator);
        }
        else {
            return this._initWebSocketClient(this.locator, initializeTimeout);
        }
    };
    Server.prototype._initHTTPClient = function (locator, clientOnly) {
        // clientOnly flag set when initializing client for last look `senderServer`
        var parsedUrl = utils_1.parseUrl(locator);
        var options = {
            protocol: parsedUrl.protocol,
            hostname: parsedUrl.hostname,
            port: parsedUrl.port,
            timeout: constants_1.REQUEST_TIMEOUT,
        };
        if (!clientOnly) {
            this.supportedProtocols = [
                { name: 'request-for-quote', version: '2.0.0' },
            ];
            this.isInitialized = true;
        }
        if (browser_or_node_1.isBrowser) {
            var jaysonClient = require('jayson/lib/client/browser');
            this.httpClient = new jaysonClient(function (request, callback) {
                fetch(url.format(parsedUrl), {
                    method: 'POST',
                    body: request,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                })
                    .then(function (res) {
                    return res.text();
                })
                    .then(function (text) {
                    callback(null, text);
                })
                    .catch(function (err) {
                    callback(err);
                });
            }, options);
        }
        else {
            var jaysonClient = require('jayson/lib/client');
            if (options.protocol === 'https:') {
                this.httpClient = jaysonClient.https(options);
            }
            else {
                this.httpClient = jaysonClient.http(options);
            }
        }
    };
    Server.prototype._initWebSocketClient = function (locator, initializeTimeout) {
        return __awaiter(this, void 0, void 0, function () {
            var initPromise;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        initPromise = new Promise(function (resolve, reject) {
                            _this.webSocketClient = new jsonrpc_client_websocket_1.JsonRpcWebsocket(url.format(locator), constants_1.REQUEST_TIMEOUT, function (error) {
                                if (!_this.isInitialized) {
                                    reject(error);
                                }
                                else {
                                    _this.emit('error', error);
                                }
                            });
                            var initTimeout = setTimeout(function () {
                                reject('Server did not call initialize in time');
                                _this.disconnect();
                            }, initializeTimeout);
                            _this.webSocketClient.on('initialize', function (message) {
                                clearTimeout(initTimeout);
                                try {
                                    _this.initialize(message);
                                    _this.isInitialized = true;
                                    resolve(_this.supportedProtocols);
                                    return true;
                                }
                                catch (e) {
                                    reject(e);
                                    return false;
                                }
                            });
                        });
                        this.webSocketClient.on('updatePricing', this.updatePricing.bind(this));
                        return [4 /*yield*/, this.webSocketClient.open()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, initPromise];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Server.prototype.requireInitialized = function () {
        if (!this.isInitialized)
            throw new Error('Server not yet initialized');
    };
    Server.prototype.requireRFQSupport = function (version) {
        this.requireProtocolSupport('request-for-quote', version);
    };
    Server.prototype.requireLastLookSupport = function (version) {
        this.requireProtocolSupport('last-look', version);
    };
    Server.prototype.requireProtocolSupport = function (protocol, version) {
        if (!this.supportsProtocol(protocol, version)) {
            var supportedVersion = this.getSupportedProtocolVersion(protocol);
            var message = void 0;
            if (supportedVersion) {
                message =
                    "Server at " + this.locator + " doesn't support " +
                        (PROTOCOL_NAMES[protocol] + " v" + version) +
                        ("supported version " + supportedVersion);
            }
            else {
                message =
                    "Server at " + this.locator + " doesn't " +
                        ("support " + PROTOCOL_NAMES[protocol]);
            }
            throw new Error(message);
        }
    };
    Server.prototype.compare = function (params, result) {
        var errors = [];
        var flat = utils_1.flattenObject(result);
        for (var param in params) {
            if (param in flat &&
                flat[param].toLowerCase() !== params[param].toLowerCase()) {
                errors.push(param);
            }
        }
        return errors;
    };
    Server.prototype.throwInvalidParams = function (method, params) {
        throw {
            code: jsonrpc_client_websocket_1.JsonRpcErrorCodes.INVALID_PARAMS,
            message: "Received invalid param format or values for method \"" + method + "\": " + params,
        };
    };
    Server.prototype.validateInitializeParams = function (params) {
        var valid = true;
        if (!Array.isArray(params))
            valid = false;
        if (valid &&
            !params.every(function (protocolInfo) { return protocolInfo.version && protocolInfo.name; }))
            valid = false;
        if (!valid)
            this.throwInvalidParams('initialize', JSON.stringify(params));
    };
    Server.prototype.validateUpdatePricingParams = function (params) {
        var valid = true;
        if (!Array.isArray(params))
            valid = false;
        if (valid &&
            !params.every(function (pricing) {
                return pricing.baseToken &&
                    pricing.quoteToken &&
                    Array.isArray(pricing.bid) &&
                    Array.isArray(pricing.ask);
            }))
            valid = false;
        if (!valid)
            this.throwInvalidParams('updatePricing', JSON.stringify(params));
    };
    Server.prototype.updatePricing = function (newPricing) {
        this.validateUpdatePricingParams(newPricing);
        this.emit('pricing', newPricing);
        return true;
    };
    Server.prototype.initialize = function (supportedProtocols) {
        var _a, _b;
        this.validateInitializeParams(supportedProtocols);
        this.supportedProtocols = supportedProtocols;
        var lastLookSupport = supportedProtocols.find(function (protocol) { return protocol.name === 'last-look'; });
        if ((_a = lastLookSupport === null || lastLookSupport === void 0 ? void 0 : lastLookSupport.params) === null || _a === void 0 ? void 0 : _a.senderServer) {
            this.senderServer = lastLookSupport.params.senderServer;
            // Prepare an http client for consider calls.
            this._initHTTPClient(this.senderServer, true);
        }
        if ((_b = lastLookSupport === null || lastLookSupport === void 0 ? void 0 : lastLookSupport.params) === null || _b === void 0 ? void 0 : _b.senderWallet) {
            this.senderWallet = lastLookSupport.params.senderWallet;
        }
    };
    Server.prototype.httpCall = function (method, params) {
        var _this = this;
        if (!Array.isArray(params)) {
            params.swapContract = this.swapContract;
        }
        return new Promise(function (resolve, reject) {
            _this.httpClient.request(method, params, function (connectionError, serverError, result) {
                if (connectionError) {
                    reject({ code: -1, message: connectionError.message });
                }
                else if (serverError) {
                    reject(serverError);
                }
                else {
                    var errors = _this.compare(params, result);
                    if (errors.length) {
                        reject({
                            code: -1,
                            message: "Server response differs from request params: " + errors,
                        });
                    }
                    else {
                        if (method.indexOf('Quote') !== -1 && !utils_1.isValidQuote(result)) {
                            reject({
                                code: -1,
                                message: "Server response is not a valid quote: " + JSON.stringify(result),
                            });
                        }
                        else {
                            resolve(result);
                        }
                    }
                }
            });
        });
    };
    Server.prototype.webSocketCall = function (method, params) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.webSocketClient.call(method, params)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.result];
                }
            });
        });
    };
    /**
     * This method should instantiate the relevenat transport client and also
     * trigger initialization, setting `isInitialized` when complete.
     */
    Server.prototype.callRPCMethod = function (method, params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this.transportProtocol === 'http' ||
                    (method === 'consider' && this.senderServer)) {
                    return [2 /*return*/, this.httpCall(method, params)];
                }
                else {
                    return [2 /*return*/, this.webSocketCall(method, params)];
                }
                return [2 /*return*/];
            });
        });
    };
    return Server;
}(tiny_typed_emitter_1.TypedEmitter));
exports.Server = Server;
//# sourceMappingURL=Server.js.map