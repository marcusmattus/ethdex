"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.orderPropsToStrings = exports.lightOrderToParams = exports.getSignerFromLightSignature = exports.createLightSignature = exports.createLightOrder = exports.isValidLightOrder = exports.numberToBytes32 = void 0;
var ethUtil = __importStar(require("ethereumjs-util"));
var sigUtil = __importStar(require("eth-sig-util"));
var ethers_1 = require("ethers");
var constants_1 = require("@airswap/constants");
var types_1 = require("@airswap/types");
function numberToBytes32(number) {
    var hexString = number.toString(16);
    return "0x" + hexString.padStart(64, '0');
}
exports.numberToBytes32 = numberToBytes32;
function isValidLightOrder(order) {
    return (order &&
        'nonce' in order &&
        'expiry' in order &&
        'signerWallet' in order &&
        'signerToken' in order &&
        'signerAmount' in order &&
        'senderToken' in order &&
        'senderAmount' in order &&
        'r' in order &&
        's' in order &&
        'v' in order);
}
exports.isValidLightOrder = isValidLightOrder;
// eslint-disable-next-line  @typescript-eslint/explicit-module-boundary-types
function createLightOrder(_a) {
    var _b = _a.expiry, expiry = _b === void 0 ? Math.round(Date.now() / 1000 + constants_1.SECONDS_IN_DAY).toString() : _b, _c = _a.nonce, nonce = _c === void 0 ? Date.now().toString() : _c, _d = _a.signerWallet, signerWallet = _d === void 0 ? constants_1.ADDRESS_ZERO : _d, _e = _a.signerToken, signerToken = _e === void 0 ? constants_1.ADDRESS_ZERO : _e, _f = _a.signerAmount, signerAmount = _f === void 0 ? '0' : _f, _g = _a.protocolFee, protocolFee = _g === void 0 ? '0' : _g, _h = _a.senderWallet, senderWallet = _h === void 0 ? constants_1.ADDRESS_ZERO : _h, _j = _a.senderToken, senderToken = _j === void 0 ? constants_1.ADDRESS_ZERO : _j, _k = _a.senderAmount, senderAmount = _k === void 0 ? '0' : _k;
    return {
        expiry: String(expiry),
        nonce: String(nonce),
        signerWallet: signerWallet,
        signerToken: signerToken,
        signerAmount: String(signerAmount),
        protocolFee: String(protocolFee),
        senderWallet: senderWallet,
        senderToken: senderToken,
        senderAmount: String(senderAmount),
    };
}
exports.createLightOrder = createLightOrder;
function createLightSignature(unsignedOrder, signer, swapContract, chainId) {
    return __awaiter(this, void 0, void 0, function () {
        var sig, _a, r, s, v;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!(typeof signer === 'string')) return [3 /*break*/, 1];
                    sig = sigUtil.signTypedData_v4(ethUtil.toBuffer(signer), {
                        data: {
                            types: types_1.EIP712Light,
                            domain: {
                                name: constants_1.LIGHT_DOMAIN_NAME,
                                version: constants_1.LIGHT_DOMAIN_VERSION,
                                chainId: chainId,
                                verifyingContract: swapContract,
                            },
                            primaryType: 'LightOrder',
                            message: unsignedOrder,
                        },
                    });
                    return [3 /*break*/, 3];
                case 1: return [4 /*yield*/, signer._signTypedData({
                        name: constants_1.LIGHT_DOMAIN_NAME,
                        version: constants_1.LIGHT_DOMAIN_VERSION,
                        chainId: chainId,
                        verifyingContract: swapContract,
                    }, { LightOrder: types_1.EIP712Light.LightOrder }, unsignedOrder)];
                case 2:
                    sig = _b.sent();
                    _b.label = 3;
                case 3:
                    _a = ethers_1.ethers.utils.splitSignature(sig), r = _a.r, s = _a.s, v = _a.v;
                    return [2 /*return*/, { r: r, s: s, v: String(v) }];
            }
        });
    });
}
exports.createLightSignature = createLightSignature;
function getSignerFromLightSignature(order, swapContract, chainId, v, r, s) {
    var sig = "" + r + s.slice(2) + ethers_1.ethers.BigNumber.from(v)
        .toHexString()
        .slice(2);
    return sigUtil.recoverTypedSignature_v4({
        data: {
            types: types_1.EIP712Light,
            domain: {
                name: constants_1.LIGHT_DOMAIN_NAME,
                version: constants_1.LIGHT_DOMAIN_VERSION,
                chainId: chainId,
                verifyingContract: swapContract,
            },
            primaryType: 'LightOrder',
            message: order,
        },
        sig: sig,
    });
}
exports.getSignerFromLightSignature = getSignerFromLightSignature;
function lightOrderToParams(order) {
    return [
        order.nonce,
        order.expiry,
        order.signerWallet,
        order.signerToken,
        order.signerAmount,
        order.senderToken,
        order.senderAmount,
        order.v,
        order.r,
        order.s,
    ];
}
exports.lightOrderToParams = lightOrderToParams;
function orderPropsToStrings(obj) {
    return {
        nonce: String(obj.nonce),
        expiry: String(obj.expiry),
        signerWallet: String(obj.signerWallet),
        signerToken: String(obj.signerToken),
        signerAmount: String(obj.signerAmount),
        senderToken: String(obj.senderToken),
        senderAmount: String(obj.senderAmount),
        v: String(obj.v),
        r: String(obj.r),
        s: String(obj.s),
    };
}
exports.orderPropsToStrings = orderPropsToStrings;
//# sourceMappingURL=orders.js.map