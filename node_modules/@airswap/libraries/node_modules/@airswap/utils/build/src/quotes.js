"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTotalBySenderAmount = exports.getTotalBySignerAmount = exports.isValidQuote = exports.createQuote = void 0;
var ethers_1 = require("ethers");
var types_1 = require("@airswap/types");
var __1 = require("..");
// eslint-disable-next-line  @typescript-eslint/explicit-module-boundary-types
function createQuote(_a) {
    var _b = _a.signer, signer = _b === void 0 ? {} : _b, _c = _a.sender, sender = _c === void 0 ? {} : _c;
    return __1.lowerCaseAddresses({
        signer: __assign(__assign({}, types_1.emptyParty), signer),
        sender: __assign(__assign({}, types_1.emptyParty), sender),
    });
}
exports.createQuote = createQuote;
function isValidQuote(quote) {
    if (quote &&
        'signer' in quote &&
        'sender' in quote &&
        'kind' in quote['signer'] &&
        'kind' in quote['sender'] &&
        'token' in quote['signer'] &&
        'token' in quote['sender'] &&
        'amount' in quote['signer'] &&
        'amount' in quote['sender'] &&
        'id' in quote['signer'] &&
        'id' in quote['sender']) {
        return true;
    }
    return false;
}
exports.isValidQuote = isValidQuote;
function getTotalBySignerAmount(quotes) {
    var total = ethers_1.ethers.BigNumber.from(0);
    for (var _i = 0, quotes_1 = quotes; _i < quotes_1.length; _i++) {
        var order = quotes_1[_i];
        total = ethers_1.ethers.BigNumber.from(order.signer.amount).add(total);
    }
    return total;
}
exports.getTotalBySignerAmount = getTotalBySignerAmount;
function getTotalBySenderAmount(quotes) {
    var total = ethers_1.ethers.BigNumber.from(0);
    for (var _i = 0, quotes_2 = quotes; _i < quotes_2.length; _i++) {
        var order = quotes_2[_i];
        total = ethers_1.ethers.BigNumber.from(order.sender.amount).add(total);
    }
    return total;
}
exports.getTotalBySenderAmount = getTotalBySenderAmount;
//# sourceMappingURL=quotes.js.map