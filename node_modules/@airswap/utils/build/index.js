"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.lowerCaseAddresses = exports.getEtherscanWalletURL = exports.getEtherscanURL = exports.parseUrl = exports.numberToBytes32 = exports.getTimestamp = exports.toAtomicString = exports.toDecimalString = exports.getBestByHighestSenderAmount = exports.getBestByHighestSignerAmount = exports.getBestByLowestSignerAmount = exports.getBestByLowestSenderAmount = exports.calculateCostFromLevels = exports.calculateCost = exports.claimPropsToStrings = exports.claimToParams = exports.isValidClaim = exports.getSignerFromClaimSignature = exports.createClaimSignature = exports.createClaim = exports.orderPropsToStrings = exports.orderToParams = exports.isValidOrder = exports.getSignerFromSwapSignature = exports.createSwapSignature = exports.createOrder = void 0;
/* eslint-disable @typescript-eslint/explicit-module-boundary-types */
var ethUtil = __importStar(require("ethereumjs-util"));
var sigUtil = __importStar(require("eth-sig-util"));
var ethers_1 = require("ethers");
var url = __importStar(require("url"));
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var constants_1 = require("@airswap/constants");
var typescript_1 = require("@airswap/typescript");
// eslint-disable-next-line  @typescript-eslint/explicit-module-boundary-types
function createOrder(_a) {
    var _b = _a.expiry, expiry = _b === void 0 ? Math.round(Date.now() / 1000 + constants_1.SECONDS_IN_DAY).toString() : _b, _c = _a.nonce, nonce = _c === void 0 ? Date.now().toString() : _c, _d = _a.signerWallet, signerWallet = _d === void 0 ? constants_1.ADDRESS_ZERO : _d, _e = _a.signerToken, signerToken = _e === void 0 ? constants_1.ADDRESS_ZERO : _e, _f = _a.signerAmount, signerAmount = _f === void 0 ? '0' : _f, _g = _a.protocolFee, protocolFee = _g === void 0 ? '0' : _g, _h = _a.senderWallet, senderWallet = _h === void 0 ? constants_1.ADDRESS_ZERO : _h, _j = _a.senderToken, senderToken = _j === void 0 ? constants_1.ADDRESS_ZERO : _j, _k = _a.senderAmount, senderAmount = _k === void 0 ? '0' : _k;
    return {
        expiry: String(expiry),
        nonce: String(nonce),
        signerWallet: signerWallet,
        signerToken: signerToken,
        signerAmount: String(signerAmount),
        protocolFee: String(protocolFee),
        senderWallet: senderWallet,
        senderToken: senderToken,
        senderAmount: String(senderAmount),
    };
}
exports.createOrder = createOrder;
function createSwapSignature(unsignedOrder, signer, swapContract, chainId) {
    return __awaiter(this, void 0, void 0, function () {
        var sig, _a, r, s, v;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!(typeof signer === 'string')) return [3 /*break*/, 1];
                    sig = sigUtil.signTypedData_v4(ethUtil.toBuffer(signer), {
                        data: {
                            types: typescript_1.EIP712Swap,
                            domain: {
                                name: constants_1.DOMAIN_NAME_SWAP,
                                version: constants_1.DOMAIN_VERSION_SWAP,
                                chainId: chainId,
                                verifyingContract: swapContract,
                            },
                            primaryType: 'Order',
                            message: unsignedOrder,
                        },
                    });
                    return [3 /*break*/, 3];
                case 1: return [4 /*yield*/, signer._signTypedData({
                        name: constants_1.DOMAIN_NAME_SWAP,
                        version: constants_1.DOMAIN_VERSION_SWAP,
                        chainId: chainId,
                        verifyingContract: swapContract,
                    }, { Order: typescript_1.EIP712Swap.Order }, unsignedOrder)];
                case 2:
                    sig = _b.sent();
                    _b.label = 3;
                case 3:
                    _a = ethers_1.ethers.utils.splitSignature(sig), r = _a.r, s = _a.s, v = _a.v;
                    return [2 /*return*/, { r: r, s: s, v: String(v) }];
            }
        });
    });
}
exports.createSwapSignature = createSwapSignature;
function getSignerFromSwapSignature(order, swapContract, chainId, v, r, s) {
    var sig = "".concat(r).concat(s.slice(2)).concat(ethers_1.ethers.BigNumber.from(v)
        .toHexString()
        .slice(2));
    return sigUtil.recoverTypedSignature_v4({
        data: {
            types: typescript_1.EIP712Swap,
            domain: {
                name: constants_1.DOMAIN_NAME_SWAP,
                version: constants_1.DOMAIN_VERSION_SWAP,
                chainId: chainId,
                verifyingContract: swapContract,
            },
            primaryType: 'Order',
            message: order,
        },
        sig: sig,
    });
}
exports.getSignerFromSwapSignature = getSignerFromSwapSignature;
function isValidOrder(order) {
    return (order &&
        'nonce' in order &&
        'expiry' in order &&
        'signerWallet' in order &&
        'signerToken' in order &&
        'signerAmount' in order &&
        'senderToken' in order &&
        'senderAmount' in order &&
        'r' in order &&
        's' in order &&
        'v' in order);
}
exports.isValidOrder = isValidOrder;
function orderToParams(order) {
    return [
        order.nonce,
        order.expiry,
        order.signerWallet,
        order.signerToken,
        order.signerAmount,
        order.senderToken,
        order.senderAmount,
        order.v,
        order.r,
        order.s,
    ];
}
exports.orderToParams = orderToParams;
function orderPropsToStrings(obj) {
    return {
        nonce: String(obj.nonce),
        expiry: String(obj.expiry),
        signerWallet: String(obj.signerWallet),
        signerToken: String(obj.signerToken),
        signerAmount: String(obj.signerAmount),
        senderToken: String(obj.senderToken),
        senderAmount: String(obj.senderAmount),
        v: String(obj.v),
        r: String(obj.r),
        s: String(obj.s),
    };
}
exports.orderPropsToStrings = orderPropsToStrings;
// eslint-disable-next-line  @typescript-eslint/explicit-module-boundary-types
function createClaim(_a) {
    var _b = _a.nonce, nonce = _b === void 0 ? Date.now().toString() : _b, _c = _a.participant, participant = _c === void 0 ? constants_1.ADDRESS_ZERO : _c, _d = _a.score, score = _d === void 0 ? '0' : _d;
    return {
        nonce: String(nonce),
        participant: participant,
        score: String(score),
    };
}
exports.createClaim = createClaim;
function createClaimSignature(unsignedClaim, signer, poolContract, chainId) {
    return __awaiter(this, void 0, void 0, function () {
        var sig, _a, r, s, v;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!(typeof signer === 'string')) return [3 /*break*/, 1];
                    sig = sigUtil.signTypedData_v4(ethUtil.toBuffer(signer), {
                        data: {
                            types: typescript_1.EIP712Claim,
                            domain: {
                                name: constants_1.DOMAIN_NAME_POOL,
                                version: constants_1.DOMAIN_VERSION_POOL,
                                chainId: chainId,
                                verifyingContract: poolContract,
                            },
                            primaryType: 'Claim',
                            message: unsignedClaim,
                        },
                    });
                    return [3 /*break*/, 3];
                case 1: return [4 /*yield*/, signer._signTypedData({
                        name: constants_1.DOMAIN_NAME_POOL,
                        version: constants_1.DOMAIN_VERSION_POOL,
                        chainId: chainId,
                        verifyingContract: poolContract,
                    }, { Claim: typescript_1.EIP712Claim.Claim }, unsignedClaim)];
                case 2:
                    sig = _b.sent();
                    _b.label = 3;
                case 3:
                    _a = ethers_1.ethers.utils.splitSignature(sig), r = _a.r, s = _a.s, v = _a.v;
                    return [2 /*return*/, { r: r, s: s, v: String(v) }];
            }
        });
    });
}
exports.createClaimSignature = createClaimSignature;
function getSignerFromClaimSignature(claim, poolContract, chainId, v, r, s) {
    var sig = "".concat(r).concat(s.slice(2)).concat(ethers_1.ethers.BigNumber.from(v)
        .toHexString()
        .slice(2));
    return sigUtil.recoverTypedSignature_v4({
        data: {
            types: typescript_1.EIP712Claim,
            domain: {
                name: constants_1.DOMAIN_NAME_POOL,
                version: constants_1.DOMAIN_VERSION_POOL,
                chainId: chainId,
                verifyingContract: poolContract,
            },
            primaryType: 'Claim',
            message: claim,
        },
        sig: sig,
    });
}
exports.getSignerFromClaimSignature = getSignerFromClaimSignature;
function isValidClaim(claim) {
    return (claim &&
        'nonce' in claim &&
        'participant' in claim &&
        'score' in claim &&
        'r' in claim &&
        's' in claim &&
        'v' in claim);
}
exports.isValidClaim = isValidClaim;
function claimToParams(claim) {
    return [
        claim.nonce,
        claim.participant,
        claim.score,
        claim.v,
        claim.r,
        claim.s,
    ];
}
exports.claimToParams = claimToParams;
function claimPropsToStrings(obj) {
    return {
        nonce: String(obj.nonce),
        participant: String(obj.participant),
        score: String(obj.score),
        v: String(obj.v),
        r: String(obj.r),
        s: String(obj.s),
    };
}
exports.claimPropsToStrings = claimPropsToStrings;
function calculateCost(amount, pricing) {
    // TODO: Formula support
    if (typeof pricing !== 'string') {
        return calculateCostFromLevels(amount, pricing);
    }
    return null;
}
exports.calculateCost = calculateCost;
function calculateCostFromLevels(amount, levels) {
    var totalAmount = new bignumber_js_1.default(amount);
    var totalAvailable = new bignumber_js_1.default(levels[levels.length - 1][0]);
    var totalCost = new bignumber_js_1.default(0);
    var previousLevel = new bignumber_js_1.default(0);
    if (totalAmount.gt(totalAvailable)) {
        throw new Error("Requested amount (".concat(totalAmount.toFixed(), ") exceeds maximum available (").concat(totalAvailable.toFixed(), ")."));
    }
    // Steps through levels and multiplies each incremental amount by the level price
    // Levels takes the form of [[ level, price ], ... ] as in [[ '100', '0.5' ], ... ]
    for (var i = 0; i < levels.length; i++) {
        var incrementalAmount = void 0;
        if (totalAmount.gt(new bignumber_js_1.default(levels[i][0]))) {
            incrementalAmount = new bignumber_js_1.default(levels[i][0]).minus(previousLevel);
        }
        else {
            incrementalAmount = new bignumber_js_1.default(totalAmount).minus(previousLevel);
        }
        totalCost = totalCost.plus(new bignumber_js_1.default(incrementalAmount).multipliedBy(levels[i][1]));
        previousLevel = new bignumber_js_1.default(levels[i][0]);
        if (totalAmount.lt(previousLevel))
            break;
    }
    return totalCost.decimalPlaces(6).toFixed();
}
exports.calculateCostFromLevels = calculateCostFromLevels;
function getLowest(objects, key) {
    var best;
    var bestAmount;
    var amount;
    for (var _i = 0, objects_1 = objects; _i < objects_1.length; _i++) {
        var obj = objects_1[_i];
        if (!obj[key])
            continue;
        if (obj[key].amount != undefined) {
            // if its a quote, it has .amount
            amount = ethers_1.ethers.BigNumber.from(obj[key].amount);
        }
        else {
            // if its an order, it has .data
            amount = ethers_1.ethers.BigNumber.from(obj[key].data.slice(0, 66));
        }
        if (!best || amount.lt(bestAmount)) {
            bestAmount = amount;
            best = obj;
        }
    }
    return best;
}
function getHighest(objects, key) {
    var best;
    var bestAmount;
    var amount;
    for (var _i = 0, objects_2 = objects; _i < objects_2.length; _i++) {
        var obj = objects_2[_i];
        if (!obj[key])
            continue;
        if (obj[key].amount != undefined) {
            // if its a quote, it has .amount
            amount = ethers_1.ethers.BigNumber.from(obj[key].amount);
        }
        else {
            // if its an order, it has .data
            amount = ethers_1.ethers.BigNumber.from(obj[key].data.slice(0, 66));
        }
        if (!best || amount.gt(bestAmount)) {
            bestAmount = amount;
            best = obj;
        }
    }
    return best;
}
function getBestByLowestSenderAmount(objects) {
    return getLowest(objects, 'sender');
}
exports.getBestByLowestSenderAmount = getBestByLowestSenderAmount;
function getBestByLowestSignerAmount(objects) {
    return getLowest(objects, 'signer');
}
exports.getBestByLowestSignerAmount = getBestByLowestSignerAmount;
function getBestByHighestSignerAmount(objects) {
    return getHighest(objects, 'signer');
}
exports.getBestByHighestSignerAmount = getBestByHighestSignerAmount;
function getBestByHighestSenderAmount(objects) {
    return getHighest(objects, 'sender');
}
exports.getBestByHighestSenderAmount = getBestByHighestSenderAmount;
function toDecimalString(value, decimals) {
    return ethers_1.ethers.utils.formatUnits(value.toString(), decimals).toString();
}
exports.toDecimalString = toDecimalString;
function toAtomicString(value, decimals) {
    return ethers_1.ethers.utils.parseUnits(value.toString(), decimals).toString();
}
exports.toAtomicString = toAtomicString;
function getTimestamp() {
    return Math.round(Date.now() / 1000).toString();
}
exports.getTimestamp = getTimestamp;
function numberToBytes32(number) {
    var hexString = number.toString(16);
    return "0x".concat(hexString.padStart(64, '0'));
}
exports.numberToBytes32 = numberToBytes32;
function parseUrl(locator) {
    if (!/(http|ws)s?:\/\//.test(locator)) {
        locator = "https://".concat(locator);
    }
    return url.parse(locator);
}
exports.parseUrl = parseUrl;
function getEtherscanURL(chainId, hash) {
    return "https://".concat(constants_1.etherscanDomains[chainId], "/tx/").concat(hash);
}
exports.getEtherscanURL = getEtherscanURL;
function getEtherscanWalletURL(chainId, address) {
    return "https://".concat(constants_1.etherscanDomains[chainId], "/address/").concat(address);
}
exports.getEtherscanWalletURL = getEtherscanWalletURL;
function lowerCaseAddresses(obj) {
    for (var key in obj) {
        if (typeof obj[key] === 'object') {
            lowerCaseAddresses(obj[key]);
        }
        else if (typeof obj[key] === 'string' && obj[key].indexOf('0x') === 0) {
            obj[key] = obj[key].toLowerCase();
        }
        else {
            obj[key] = obj[key].toString();
        }
    }
    return obj;
}
exports.lowerCaseAddresses = lowerCaseAddresses;
//# sourceMappingURL=index.js.map