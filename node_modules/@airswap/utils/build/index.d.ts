/// <reference types="node" />
import { ethers } from 'ethers';
import * as url from 'url';
import { UnsignedOrder, Order, UnsignedClaim, Claim, Signature, Levels, Formula } from '@airswap/typescript';
export declare function createOrder({ expiry, nonce, signerWallet, signerToken, signerAmount, protocolFee, senderWallet, senderToken, senderAmount, }: any): UnsignedOrder;
export declare function createSwapSignature(unsignedOrder: UnsignedOrder, signer: ethers.VoidSigner | string, swapContract: string, chainId: number): Promise<Signature>;
export declare function getSignerFromSwapSignature(order: UnsignedOrder, swapContract: string, chainId: number, v: string, r: string, s: string): string;
export declare function isValidOrder(order: Order): boolean;
export declare function orderToParams(order: Order): Array<string>;
export declare function orderPropsToStrings(obj: any): Order;
export declare function createClaim({ nonce, participant, score, }: any): UnsignedClaim;
export declare function createClaimSignature(unsignedClaim: UnsignedClaim, signer: ethers.VoidSigner | string, poolContract: string, chainId: number): Promise<Signature>;
export declare function getSignerFromClaimSignature(claim: UnsignedClaim, poolContract: string, chainId: number, v: string, r: string, s: string): string;
export declare function isValidClaim(claim: Claim): boolean;
export declare function claimToParams(claim: Claim): Array<string>;
export declare function claimPropsToStrings(obj: any): Claim;
export declare function calculateCost(amount: string, pricing: Formula | Levels): string;
export declare function calculateCostFromLevels(amount: string, levels: Levels): string;
export declare function getBestByLowestSenderAmount(objects: Array<Order>): any;
export declare function getBestByLowestSignerAmount(objects: Array<Order>): any;
export declare function getBestByHighestSignerAmount(objects: Array<Order>): any;
export declare function getBestByHighestSenderAmount(objects: Array<Order>): any;
export declare function toDecimalString(value: string | ethers.BigNumber, decimals: string | number): string;
export declare function toAtomicString(value: string | ethers.BigNumber, decimals: string | number): string;
export declare function getTimestamp(): string;
export declare function numberToBytes32(number: number): string;
export declare function parseUrl(locator: string): url.UrlWithStringQuery;
export declare function getEtherscanURL(chainId: number, hash: string): string;
export declare function getEtherscanWalletURL(chainId: number, address: string): string;
export declare function lowerCaseAddresses(obj: any): any;
