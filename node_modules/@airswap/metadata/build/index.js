"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.firstTokenBySymbol = exports.findTokensBySymbol = exports.findTokenByAddress = exports.scrapeToken = exports.fetchTokens = void 0;
var axios_1 = __importDefault(require("axios"));
var ethers = __importStar(require("ethers"));
var constants_1 = require("./src/constants");
var constants_2 = require("@airswap/constants");
var helpers_1 = require("./src/helpers");
function fetchTokens(chainId) {
    return __awaiter(this, void 0, void 0, function () {
        var errors, tokens, promises;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    errors = [];
                    tokens = [];
                    return [4 /*yield*/, Promise.allSettled(constants_1.known.map(function (url) { return __awaiter(_this, void 0, void 0, function () {
                            var res, e_1;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        _a.trys.push([0, 2, , 3]);
                                        return [4 /*yield*/, axios_1.default.get(url)];
                                    case 1:
                                        res = _a.sent();
                                        return [2 /*return*/, res.data.tokens];
                                    case 2:
                                        e_1 = _a.sent();
                                        return [2 /*return*/, { url: url, message: e_1.message }];
                                    case 3: return [2 /*return*/];
                                }
                            });
                        }); }))];
                case 1:
                    promises = _a.sent();
                    tokens.push.apply(tokens, constants_1.defaults);
                    promises.forEach(function (promise) {
                        if (promise.status === 'fulfilled') {
                            if (promise.value.message) {
                                errors.push(promise.value);
                            }
                            else {
                                tokens.push.apply(tokens, promise.value);
                            }
                        }
                        else {
                            errors.push(promise.reason.message);
                        }
                    });
                    tokens = tokens.filter(function (token) {
                        token.address = token.address.toLowerCase();
                        return token.address && token.chainId === chainId;
                    });
                    return [2 /*return*/, { tokens: tokens, errors: errors }];
            }
        });
    });
}
exports.fetchTokens = fetchTokens;
function scrapeToken(address, ethersProvider) {
    return __awaiter(this, void 0, void 0, function () {
        var provider, chainId, _a, name, symbol, image_url, schema_name, _b, tokenSymbol, tokenName, tokenDecimals;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    if (typeof ethersProvider === 'string') {
                        provider = new ethers.providers.JsonRpcProvider(ethersProvider);
                    }
                    else {
                        provider = ethersProvider;
                    }
                    return [4 /*yield*/, provider.getNetwork()];
                case 1:
                    chainId = (_c.sent()).chainId;
                    if (!constants_1.openSeaUrls[chainId]) return [3 /*break*/, 3];
                    return [4 /*yield*/, axios_1.default.get("".concat(constants_1.openSeaUrls[chainId], "/asset_contract/").concat(address))];
                case 2:
                    _a = (_c.sent()).data, name = _a.name, symbol = _a.symbol, image_url = _a.image_url, schema_name = _a.schema_name;
                    if (schema_name === 'ERC721' || schema_name === 'ERC1155') {
                        return [2 /*return*/, {
                                chainId: chainId,
                                address: address.toLowerCase(),
                                name: name,
                                symbol: symbol,
                                extensions: {
                                    kind: constants_2.tokenKinds[schema_name],
                                },
                                logoURI: image_url,
                                decimals: 0,
                            }];
                    }
                    _c.label = 3;
                case 3: return [4 /*yield*/, Promise.all([
                        (0, helpers_1.getTokenSymbol)(address, provider),
                        (0, helpers_1.getTokenName)(address, provider),
                        (0, helpers_1.getTokenDecimals)(address, provider),
                    ])];
                case 4:
                    _b = _c.sent(), tokenSymbol = _b[0], tokenName = _b[1], tokenDecimals = _b[2];
                    return [2 /*return*/, {
                            chainId: chainId,
                            address: address.toLowerCase(),
                            name: tokenName,
                            symbol: tokenSymbol || tokenName.toUpperCase(),
                            extensions: {
                                kind: constants_2.tokenKinds.ERC20,
                            },
                            decimals: Number(tokenDecimals),
                        }];
            }
        });
    });
}
exports.scrapeToken = scrapeToken;
function findTokenByAddress(address, tokens) {
    return tokens.find(function (token) {
        return token.address === address;
    });
}
exports.findTokenByAddress = findTokenByAddress;
function findTokensBySymbol(symbol, tokens) {
    return tokens.filter(function (token) {
        return token.symbol === symbol;
    });
}
exports.findTokensBySymbol = findTokensBySymbol;
function firstTokenBySymbol(symbol, tokens) {
    return tokens.find(function (token) {
        return token.symbol === symbol;
    });
}
exports.firstTokenBySymbol = firstTokenBySymbol;
//# sourceMappingURL=index.js.map